/**
 * @defgroup group_crypto Crypto
 * Cryptographic Acceleration Engine HAL driver.
 *
 * For documentation see @ref group_crypto_doc section.\n
 * For API reference see @ref group_crypto_api section.\n
 * For Crypto HAL usage samples, including initialization and transaction
 * submission flows see @ref group_crypto_samples section.\n
 *
 * @defgroup group_crypto_doc Documentation
 * @ingroup group_crypto
 * @{
 * @page cryptodoc
 * @ref crypto_overview\n
 * @ref crypto_flows
 * @section crypto_overview Overview
 * The Cryptographic acceleration engine (shortly Crypto) contains
 * the following components:
 * -# High performance Universal DMA (a pair of M2S and S2M)
 * -# Crypto Application layer
 *
 * A requested operation is inserted into the M2S UDMA by adding submission
 * descriptors to the submission ring of the M2S UDMA. The descriptors
 * contain the operation type and pointers to the different source buffers
 * (IV,  SA, Signature, SRC etc.).
 * The M2S UDMA fetches those descriptors along with the source buffers data
 * from system memory and transfers it to the application layer.
 * The application layer, in turn, generates the output data according to
 * the request type and streams this data to S2M UDMA. The S2M UDMA fetches a
 * descriptor from it's submission ring and according to its contents knows
 * where to write the data that it receives from the application layer.
 * Once the data stream of the operation done, The S2M UDMA finishes the
 * request by writing descriptors to the completion ring. The S2M UDMA writes
 * completion descriptor for each descriptor it fetched from the S2M
 * submission ring.
 *
 * The Cryptographic accelerator offers following set of features:
 * - Encryption/Decryption algorithms:
 *     - DES/3DES in ECB and CBC modes.
 *     - AES with 128/192/256 key size in ECB, CBC and CTR
 * - Authentication algorithms
 *     - MD5
 *     - SHA-1, SHA256, SHA384 and SHA512
 *     - HMAC-MD5 and HMAC-SHA
 * - Authentication and Encryption in Single path.
 * - Combined Authentication and Encryption Algorithms
 *     - AES CCM and AES GCM
 * - CRC and Checksum calculation
 *
 * The crypto accelerator includes Cached SAD memory. Each Security
 * Association (SA) entry within the Cached SAD provides the security
 * operation, modes, attributes and context for the packets related to this
 * specific SA session. The main goal of the Cached SAD is to optimize
 * performance by having the SA available in the cache for the most common
 * traffic streams in the system, or for handling multiple back-to-back
 * packets of the same SA, avoiding the need to read the SA of each packet
 * from the host memory. This reduced load on host memory and improve overall
 * performance, mainly for short packets.
 *
 * @par Crypto engine block diagram:
 * @image html ssm/crypto_block_diagram.png
 *
 * @subsection m2mudma M2M UDMA
 * The HAL driver maintains M2M UDMA structure (al_m2m_udma) as the HW consists
 * of two UDMAs. Both of the UDMAs initialized and managed using the M2M UDMA
 * module.
 *
 * As of this version, the completion queue of the M2S is ignored and the HAL
 * does not rely on its functionality. However, the S2M completion descriptions
 * and ring are used as an integral part of this design.
 *
 * @subsection cachedsad Cached Security Association Data structure (SAD)
 * The cached SAD is not managed by the HAL. The HAL only supplies the ability
 * to push new SA to the cached SAD and fetch a cached SAD through the
 * al_crypto_dma_prepare() API.
 *
 * Fetching an SA may be required in the following cases:
 * - Each time SA is evicted while using IV generated by the Crypto engine
 * - Each time SA is evicted while using the SA to hold a temp MAC signature
 * - On the first time SA is evicted when using AES decryption key generated by
 * the HW
 *
 * Fetching SA can be done by pushing a new SA entry through
 * al_crypto_transaction SA_in and placing an appropriate buffer in the SA_out.
 *
 * Initializing a new SA entry should be done through al_crypto_hw_sa_init().
 *
 * The upper layer should manage the cached SAD according to its requirement.
 * Several examples of cached SAD management:
 * - Any known replacement algorithm like Least Recently Used (LRU), Round Robin
 * (RR), Last In First Out (LIFO) etc.
 * - In case there are specific SAs known to be performance critical these
 * entries can be locked in the cached SAD, while leaving at least one entry to
 * be replaced by the rest of the SAs.
 * - In case the Crypto UDMA Queue is "bounded" to a specific core or the upper
 * layer wants to avoid any locking required while managing the cached SAD,
 * the upper layer can assign SAD entries per Queue.
 *
 * @section crypto_flows Software Flows
 * @subsection init Initialization
 * - Initialization is done with SSM common HAL API. see @ref group_ssm_api
 *
 * @subsection xactions Transactions
 * The transaction describes a HW operation request.
 * Transaction supported by the crypto driver:
 * - Crypto (enc, auth or enc+auth): al_crypto_transaction
 *
 * @subsubsection xactionssend Submitting a transaction to the HW
 * @par Transaction preparation
 * There are two functions for transaction preparation, one for each
 * transaction type:
 * - Crypto (enc, auth or enc+auth): al_crypto_dma_prepare()
 * .
 * Each of these APIs perform the following steps:
 * - Calculate need RX descriptors and check if the RX UDMA have available space.
 * The number of descriptors depends on which buffers are passed in the
 * transaction (SA_in, enc_IV_in, Sign_in) and the number of source buffers.
 * - Do the same for TX descriptors.
 * The number of descriptors depends on which buffers are passed in the
 * transaction (SA_out, enc_IV_out, Sign_out, enc_out).
 * - Prepare the RX descriptors.
 * - Update the tail pointer of the submission ring of the RX UDMA about the
 * new prepared descriptors.
 * - Prepare the TX descriptors.
 *
 * @par Transaction execution
 * al_crypto_dma_action() is used to trigger the transaction execution.
 * This API updates the tail pointer of the submission ring of TX UDMA about the
 * previously prepared descriptors.
 *
 * @subsubsection xactionscrypto Crypto Transactions
 * All crypto transactions are associated with a cached SA, this SA is passed as
 * the SA index into the cached SAD (@link al_crypto_transaction::sa_indx
 * sa_indx@endlink).
 * The al_crypto_transaction supports scatter list buffer encryption,
 * authentication and combined operation (encryption and authentication in one
 * pass).
 *
 * When using an SA type of Authentication only, the Crypto can support
 * splitting the Authentication operation into few requests by using the
 * @link al_crypto_transaction::auth_first auth_first@endlink,
 * @link al_crypto_transaction::auth_last auth_last@endlink and
 * @link al_crypto_transaction::auth_fl_valid auth_fl_valid@endlink
 * flags and using an Authentication IV
 * @link al_crypto_transaction::auth_iv_in auth_iv_in@endlink and
 * @link al_crypto_transaction::auth_iv_out auth_iv_out@endlink.
 * This mode of operation is required to properly accelerate
 * Authentication operations through the OpenSSL and Linux Kernel Crypto stack.
 *
 * When using an SA type of Encryption (Enc only or Enc+Auth), the Crypto can
 * get the IV required for the encryption from the upper layer
 * @link al_crypto_transaction::enc_iv_in enc_iv_in@endlink,
 * or using IV generated by the engine (based on the previous encryption
 * executed using this SA). In any case the IV used by the engine can be passed
 * to the upper layer through the
 * @link al_crypto_transaction::enc_iv_out enc_iv_out@endlink.
 *
 * When executing a signature verification operation on an SA type of Encryption
 * and Authentication or of Authentication Only with last indication, the crypto
 * can compare the actual buffer signature
 * @link al_crypto_transaction::auth_sign_in auth_sign_in@endlink
 * to the engine outcome and indicate the result on the S2M completion.
 * In any case the engine signature can be passed to the upper layer through the
 * @link al_crypto_transaction::auth_sign_out auth_sign_out@endlink.
 *
 * To maximize the Crypto engine performance the upper layer should:
 * - Initialize an SA with proper offsets, eliminating the need to pass the
 * offsets through each transaction request by preparing additional metadata
 * descriptor.
 * - Place the SA in the cached SAD and "lock" it, eliminating the need to copy
 * new SA into the Crypto cached SAD and to prepare a special descriptor for it.
 * - Use requests that exploit the engine IV generation, eliminating the need
 * for SW IV generation.
 *
 * @subsubsection cryptoxactionscmpl Completing Transactions
 * When the upper layer decides to check for completed transaction (e.g. due to
 * interrupt) it calls al_crypto_dma_completion() API.
 * al_crypto_dma_completion() is responsible for the cleanup of the
 * completed request from the completion ring, so upper layer doesn't need to
 * worry about the queues management.
 * This driver doesn't tell the upper layer which transaction is completed, the
 * upper layer should find this information by itself relying on the fact that
 * for a given queue, the transactions are completed in the same order they were
 * submitted. No ordering is guaranteed between transactions that are submitted
 * to different queues.
 * @}
 */
