/*
 * Copyright 2018, Amazon.com, Inc. or its affiliates. All Rights Reserved
 */

/**
 *  @{
 * @file   al_hal_serdes_avg_lane_regs.h
 *
 * @brief srd_1lane registers
 *
 * This file was auto-generated by RegGen v1.2.1
 *
 */

#ifndef __AL_HAL_SERDES_AVG_LANE_REGS_H__
#define __AL_HAL_SERDES_AVG_LANE_REGS_H__

#include "al_hal_plat_types.h"

#ifdef __cplusplus
extern "C" {
#endif

/*
 * Unit Registers
 */

/*
 * General configuration and status
 */
struct al_srd_1lane_gen {
	/* [0x0] SERDES registers Version */
	uint32_t version;
	/* [0x4] */
	uint32_t rsrvd_0[3];
	/* [0x10] SERDES register file address */
	uint32_t cntl;
	/* [0x14] */
	uint32_t rsrvd_1[3];
	/* [0x20] SERDES control */
	uint32_t i_core_interrupt;
	/* [0x24] SERDES control */
	uint32_t i_core_interrupt_res;
	/* [0x28] SERDES control */
	uint32_t status;
	/* [0x2c] */
	uint32_t rsrvd_2;
	/* [0x30] */
	uint32_t core_to_cntl;
	/* [0x34] SERDES control */
	uint32_t tx_override;
	/* [0x38] */
	uint32_t dbg_rdy_lat_low;
	/* [0x3c] */
	uint32_t rsrvd_3[49];
};

struct al_srd_1lane_ctl {
	/* [0x0] */
	uint32_t reserved;
	/* [0x4] */
	uint32_t rsrvd_0[3];
	/*
	 * [0x10]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t sw_scratch;
	/* [0x14] */
	uint32_t rsrvd_1[3];
};

struct al_srd_1lane_fsm {
	/*
	 * [0x0] full   rate ref multi by 60
	 * Reset: 0x6003c     Access: RW
	 */
	uint32_t set;
	/*
	 * [0x4] full   rate ref multi by 60
	 * Reset: 0x6003c     Access: RW
	 */
	uint32_t scnd_set;
	/* [0x8] */
	uint32_t scnd;
	/* [0xc] */
	uint32_t rsrvd_0;
};

/*
 * Pcie spcific
 */
struct al_srd_1lane_pcie {
	/* [0x0] */
	uint32_t cfg;
	/* [0x4] */
	uint32_t rsrvd_0[7];
};

/*
 * 16nm SerDes macro
 */
struct al_srd_1lane_core {
	/*
	 * [0x0]
	 * Reset: 0x0         Access: RO
	 */
	uint32_t stat;
	/* [0x4] */
	uint32_t rsrvd_0[3];
};

/*
 * 16nm SerDes macro
 */
struct al_srd_1lane_eth {
	/* [0x0] Clk = 20bitclk *(N+M)/N */
	uint32_t postdiv;
	/*
	 * [0x4] Each “1” will create an enable to the clk gate
	 * Reset: 0x1         Access: RW
	 */
	uint32_t pdiv_msb;
	/*
	 * [0x8] Each “1” will create an enable to the clk gate
	 * Reset: 0xad6b5ad6  Access: RW
	 */
	uint32_t pdiv_lsb;
	/* [0xc] */
	uint32_t rsrvd_0;
};

struct al_srd_1lane_comma {
	/* [0x0] */
	uint32_t det;
	/* [0x4] */
	uint32_t rsrvd_0[3];
};

struct al_srd_1lane_sata {
	/* [0x0] */
	uint32_t conf;
	/* [0x4] */
	uint32_t rsrvd_0[3];
};

struct al_srd_1lane_spico {
	/* [0x0] Timing margins */
	uint32_t mem;
	/* [0x4] */
	uint32_t rsrvd_0[7];
};

struct al_srd_1lane_regs {
	/* [0x0] 4 groups of interrupts */
	uint32_t int_ctrl_mem[64];
	/* [0x100] General configuration and status */
	struct al_srd_1lane_gen gen;
	/* [0x200] */
	struct al_srd_1lane_ctl ctl[2];
	/* [0x240] */
	struct al_srd_1lane_fsm fsm[16];
	/* [0x340] Pcie spcific */
	struct al_srd_1lane_pcie pcie;
	/* [0x360] 16nm SerDes macro */
	struct al_srd_1lane_core core;
	/* [0x370] 16nm SerDes macro */
	struct al_srd_1lane_eth eth;
	/* [0x380] */
	struct al_srd_1lane_comma comma;
	/* [0x390] */
	struct al_srd_1lane_sata sata;
	/* [0x3a0] */
	struct al_srd_1lane_spico spico;
	/* [0x3c0] */
	uint32_t rsrvd_0[16];
};


/*
 * Registers Fields
 */

/**** version register ****/
/*
 * Revision number (Minor)
 * Reset: 0x1         Access: RO
 */
#define SRD_1LANE_GEN_VERSION_RELEASE_NUM_MINOR_MASK 0x000000FF
#define SRD_1LANE_GEN_VERSION_RELEASE_NUM_MINOR_SHIFT 0
/*
 * Revision number (Major)
 * Reset: 0x1         Access: RO
 */
#define SRD_1LANE_GEN_VERSION_RELEASE_NUM_MAJOR_MASK 0x0000FF00
#define SRD_1LANE_GEN_VERSION_RELEASE_NUM_MAJOR_SHIFT 8
/*
 * date of release
 * Reset: 0x1         Access: RO
 */
#define SRD_1LANE_GEN_VERSION_DATE_DAY_MASK 0x001F0000
#define SRD_1LANE_GEN_VERSION_DATE_DAY_SHIFT 16
/*
 * month of release
 * Reset: 0x5         Access: RO
 */
#define SRD_1LANE_GEN_VERSION_DATA_MONTH_MASK 0x01E00000
#define SRD_1LANE_GEN_VERSION_DATA_MONTH_SHIFT 21
/*
 * year of release (starting from 2000)
 * Reset: 0xf         Access: RO
 */
#define SRD_1LANE_GEN_VERSION_DATE_YEAR_MASK 0x3E000000
#define SRD_1LANE_GEN_VERSION_DATE_YEAR_SHIFT 25
/*
 * Reserved
 * Reset: 0x3         Access: RO
 */
#define SRD_1LANE_GEN_VERSION_RESERVED_MASK 0xC0000000
#define SRD_1LANE_GEN_VERSION_RESERVED_SHIFT 30

/**** cntl register ****/
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_GEN_CNTL_TX_SW_RESET   (1 << 0)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_GEN_CNTL_RX_SW_RESET   (1 << 1)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_GEN_CNTL_LINK_LOOPBACK_MASK (1 << 2)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_GEN_CNTL_LINK_LOOPBACK_SET (1 << 3)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_GEN_CNTL_LOOPBACK_FIFO_RESET (1 << 4)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_GEN_CNTL_LOOPBACK_FIFO_BYPASS (1 << 5)
/*
 * 0 - master refclk, input will be zero, else receive neighbor SerDes refclk
 * Reset: 0x0         Access: RW
 */
#define SRD_1LANE_GEN_CNTL_PHASE_OPTIMIZER_SLAVE (1 << 6)
/* Reset: 0x1         Access: RW */
#define SRD_1LANE_GEN_CNTL_ENABLE_BEACON (1 << 7)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_GEN_CNTL_DISABLE_RX_RDY_MASK (1 << 8)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_GEN_CNTL_INT_RDY_WHEN_PROGRESS_DONE (1 << 9)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_GEN_CNTL_LOOPTIMING_EN (1 << 10)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_GEN_CNTL_TX_SWAP       (1 << 12)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_GEN_CNTL_RX_SWAP       (1 << 13)

/**** i_core_interrupt register ****/
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_GEN_I_CORE_INTERRUPT_DATA_MASK 0x0000FFFF
#define SRD_1LANE_GEN_I_CORE_INTERRUPT_DATA_SHIFT 0
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_GEN_I_CORE_INTERRUPT_CODE_MASK 0xFFFF0000
#define SRD_1LANE_GEN_I_CORE_INTERRUPT_CODE_SHIFT 16

/**** i_core_interrupt_res register ****/
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_I_CORE_INTERRUPT_RES_DATA_MASK 0x0000FFFF
#define SRD_1LANE_GEN_I_CORE_INTERRUPT_RES_DATA_SHIFT 0
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_I_CORE_INTERRUPT_RES_PROGRESS (1 << 16)
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_I_CORE_INTERRUPT_RES_ACTIVE (1 << 17)

/**** status register ****/
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_STATUS_STAT_MASK   0x0000FFFF
#define SRD_1LANE_GEN_STATUS_STAT_SHIFT  0
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_STATUS_RX_RDY      (1 << 16)
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_STATUS_TX_RDY      (1 << 17)
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_STATUS_IDLE_DETECT (1 << 18)
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_STATUS_LOCAL_FS_LF_VALID (1 << 19)
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_STATUS_LINK_LOOPBACK_EN (1 << 20)

/**** core_to_cntl register ****/
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_GEN_CORE_TO_CNTL_VAL_MASK 0x0000FFFF
#define SRD_1LANE_GEN_CORE_TO_CNTL_VAL_SHIFT 0

/**** tx_override register ****/
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_GEN_TX_OVERRIDE_ENABLE (1 << 0)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_GEN_TX_OVERRIDE_VAL    (1 << 1)

/**** dbg_rdy_lat_low register ****/
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_DBG_RDY_LAT_LOW_RX (1 << 0)
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_DBG_RDY_LAT_LOW_TX (1 << 1)
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_DBG_RDY_LAT_LOW_RX_SIGNAL_OK (1 << 2)
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_DBG_RDY_LAT_LOW_COMMA_ALIGNED_CURR (1 << 3)
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_DBG_RDY_LAT_LOW_COMMA_ALIGNED (1 << 4)
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_DBG_RDY_LAT_LOW_COMMA_ALIGNED_HIGH (1 << 5)
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_DBG_RDY_LAT_LOW_CDRLOCK2DATA_CURR (1 << 6)
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_DBG_RDY_LAT_LOW_CDRLOCK2DATA (1 << 7)
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_DBG_RDY_LAT_LOW_CDRLOCK2DATA_HIGH (1 << 8)
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_DBG_RDY_LAT_LOW_RXSIGDET_CURR (1 << 9)
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_DBG_RDY_LAT_LOW_RXSIGDET (1 << 10)
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_DBG_RDY_LAT_LOW_RXSIGDET_HIGH (1 << 11)
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_DBG_RDY_LAT_LOW_FSM_STATE_CURR_MASK 0x00007000
#define SRD_1LANE_GEN_DBG_RDY_LAT_LOW_FSM_STATE_CURR_SHIFT 12
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_DBG_RDY_LAT_LOW_FSM_STATE_MASK 0x00038000
#define SRD_1LANE_GEN_DBG_RDY_LAT_LOW_FSM_STATE_SHIFT 15
/* Reset: 0x0         Access: RO */
#define SRD_1LANE_GEN_DBG_RDY_LAT_LOW_FSM_STATE_HIGH_MASK 0x001C0000
#define SRD_1LANE_GEN_DBG_RDY_LAT_LOW_FSM_STATE_HIGH_SHIFT 18

/**** reserved register ****/
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_CTL_RESERVED_NEGATIVE_MASK 0x0000FFFF
#define SRD_1LANE_CTL_RESERVED_NEGATIVE_SHIFT 0
/* Reset: 0xffff      Access: RW */
#define SRD_1LANE_CTL_RESERVED_POSITIVE_MASK 0xFFFF0000
#define SRD_1LANE_CTL_RESERVED_POSITIVE_SHIFT 16

/**** scnd register ****/
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_FSM_SCND_NEXT_CMD_INPUT_MASK 0x0000000F
#define SRD_1LANE_FSM_SCND_NEXT_CMD_INPUT_SHIFT 0
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_FSM_SCND_NEXT_EN_INPUT (1 << 4)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_FSM_SCND_NEXT_CMD_MASK 0x00000F00
#define SRD_1LANE_FSM_SCND_NEXT_CMD_SHIFT 8
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_FSM_SCND_NEXT_EN       (1 << 12)

/**** cfg register ****/
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_PCIE_CFG_BYPASS_EN     (1 << 0)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_PCIE_CFG_FTS_ALIGN_EN  (1 << 1)
/* Reset: 0x1         Access: RW */
#define SRD_1LANE_PCIE_CFG_PCS_INTERRUPT_DISABLE (1 << 2)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_PCIE_CFG_RX_8B10B_REALIGN_EN (1 << 3)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_PCIE_CFG_SRIS_ENABLE   (1 << 4)
/* Reset: 0x1         Access: RW */
#define SRD_1LANE_PCIE_CFG_DISABLE_FSM   (1 << 5)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_PCIE_CFG_DISABLE_I_CORE_CLK (1 << 6)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_PCIE_CFG_SBUS_IF_BYPASS (1 << 7)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_PCIE_CFG_REFCLK_SEL_MASK 0x00000700
#define SRD_1LANE_PCIE_CFG_REFCLK_SEL_SHIFT 8
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_PCIE_CFG_TX_ELECT_IDLE_OVERRIDE (1 << 12)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_PCIE_CFG_TX_ELECT_IDLE_VAL (1 << 13)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_PCIE_CFG_MULTI_COMMA_DET_BYPASS (1 << 16)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_PCIE_CFG_MULTI_COMMA_DET_SW_RESET (1 << 17)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_PCIE_CFG_ASYNC_RESET_N (1 << 20)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_PCIE_CFG_CORE_CLK_MUX_SEL (1 << 24)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_PCIE_CFG_CORE_CLK_MUX_CLR (1 << 25)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_PCIE_CFG_PCLK_MUX_SEL  (1 << 26)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_PCIE_CFG_PCLK_MUX_CLR  (1 << 27)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_PCIE_CFG_I_PCIE_CORE_CLK_MUX_SEL (1 << 28)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_PCIE_CFG_I_PCIE_CORE_CLK_MUX_CLR (1 << 29)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_PCIE_CFG_I_PCIE_CORE_CLK_DISABLE (1 << 30)

/**** postdiv register ****/
/* Reset: 0x14        Access: RW */
#define SRD_1LANE_ETH_POSTDIV_N_MASK     0x000000FF
#define SRD_1LANE_ETH_POSTDIV_N_SHIFT    0
/* Reset: 0x21        Access: RW */
#define SRD_1LANE_ETH_POSTDIV_M_MASK     0x0000FF00
#define SRD_1LANE_ETH_POSTDIV_M_SHIFT    8
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_ETH_POSTDIV_ENABLE     (1 << 16)

/**** det register ****/
/* Reset: 0x283       Access: RW */
#define SRD_1LANE_COMMA_DET_WORD_0_MASK  0x000003FF
#define SRD_1LANE_COMMA_DET_WORD_0_SHIFT 0
/* Reset: 0x17c       Access: RW */
#define SRD_1LANE_COMMA_DET_WORD_1_MASK  0x003FF000
#define SRD_1LANE_COMMA_DET_WORD_1_SHIFT 12
/* Reset: 0x3         Access: RW */
#define SRD_1LANE_COMMA_DET_ALIGN_THRESHOLD_MASK 0x0F000000
#define SRD_1LANE_COMMA_DET_ALIGN_THRESHOLD_SHIFT 24
/* Reset: 0x4         Access: RW */
#define SRD_1LANE_COMMA_DET_UNALIGN_THRESHOLD_MASK 0xF0000000
#define SRD_1LANE_COMMA_DET_UNALIGN_THRESHOLD_SHIFT 28

/**** conf register ****/
/*
 * Mask idle signals (t+4,t+3,t+2,t+1,t,t-1)
 * Reset: 0x1e        Access: RW
 */
#define SRD_1LANE_SATA_CONF_IDLE_DELAY_MASK_MASK 0x0000003F
#define SRD_1LANE_SATA_CONF_IDLE_DELAY_MASK_SHIFT 0
/* Reset: 0x2         Access: RW */
#define SRD_1LANE_SATA_CONF_TX_DATA_DELAY_OH_MASK 0x00000F00
#define SRD_1LANE_SATA_CONF_TX_DATA_DELAY_OH_SHIFT 8
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_SATA_CONF_RXSIGNALDETECT_OVD (1 << 12)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_SATA_CONF_RXSIGNALDETECT_VAL (1 << 13)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_SATA_CONF_RXCDRLOCK2DATA_OVD (1 << 14)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_SATA_CONF_RXCDRLOCK2DATA_VAL (1 << 15)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_SATA_CONF_COMMA_DET_OVD (1 << 16)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_SATA_CONF_COMMA_DET_VAL (1 << 17)
/* Reset: 0x1         Access: RW */
#define SRD_1LANE_SATA_CONF_RXSIGNALDETECT_AS_RXRDY (1 << 18)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_SATA_CONF_MANUAL_SPEED (1 << 19)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_SATA_CONF_FSM_STATE_LOW_MASK 0x00700000
#define SRD_1LANE_SATA_CONF_FSM_STATE_LOW_SHIFT 20
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_SATA_CONF_FSM_STATE_HIGH_MASK 0x03800000
#define SRD_1LANE_SATA_CONF_FSM_STATE_HIGH_SHIFT 23
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_SATA_CONF_MANUAL_OFFSET_GEN1_MASK 0x0C000000
#define SRD_1LANE_SATA_CONF_MANUAL_OFFSET_GEN1_SHIFT 26
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_SATA_CONF_MANUAL_OFFSET_GEN2 (1 << 28)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_SATA_CONF_FSM_RXRDY_MASK_MASK 0xE0000000
#define SRD_1LANE_SATA_CONF_FSM_RXRDY_MASK_SHIFT 29

/**** mem register ****/
/*
 * Guardband value
 * Reset: 0x2d6       Access: RW
 */
#define SRD_1LANE_SPICO_MEM_ULP_TMG_MODE_MASK 0x000003FF
#define SRD_1LANE_SPICO_MEM_ULP_TMG_MODE_SHIFT 0
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_SPICO_MEM_MEM_MSTR_CTRL_EN (1 << 10)
/* Reset: 0x0         Access: RW */
#define SRD_1LANE_SPICO_MEM_PBIST_MASK   0xFFFFF000
#define SRD_1LANE_SPICO_MEM_PBIST_SHIFT  12

#ifdef __cplusplus
}
#endif

#endif

/** @} */
