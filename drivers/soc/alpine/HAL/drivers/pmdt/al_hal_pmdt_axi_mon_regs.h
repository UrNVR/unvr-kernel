/*
 * Copyright 2018, Amazon.com, Inc. or its affiliates. All Rights Reserved
 */

/**
 *  @{
 * @file   al_hal_pmdt_axi_mon_regs.h
 *
 * @brief pmdt_axi_mon registers
 *
 * This file was auto-generated by RegGen v1.2.1
 *
 */

#ifndef __AL_HAL_PMDT_AXI_MON_REGS_H__
#define __AL_HAL_PMDT_AXI_MON_REGS_H__

#include "al_hal_plat_types.h"

#ifdef __cplusplus
extern "C" {
#endif

/*
 * Unit Registers
 */

/*
 * AXI latency Tracker
 */
struct al_pmdt_axi_mon_axi_mon {
	/*
	 * [0x0] Threshold low 32 bits
	 * Threshold low 32 bits
	 * Reset: 0x0         Access: RW
	 */
	uint32_t threshold_0_low;
	/*
	 * [0x4] Threshold high 32 bits
	 * Threshold high 32 bits
	 * Reset: 0x0         Access: RW
	 */
	uint32_t threshold_0_high;
	/*
	 * [0x8] Threshold low 32 bits
	 * Threshold low 32 bits
	 * Reset: 0x0         Access: RW
	 */
	uint32_t threshold_1_low;
	/*
	 * [0xc] Threshold high 32 bits
	 * Threshold high 32 bits
	 * Reset: 0x0         Access: RW
	 */
	uint32_t threshold_1_high;
	/*
	 * [0x10] Threshold low 32 bits
	 * Threshold low 32 bits
	 * Reset: 0x0         Access: RW
	 */
	uint32_t threshold_2_low;
	/*
	 * [0x14] Threshold high 32 bits
	 * Threshold high 32 bits
	 * Reset: 0x0         Access: RW
	 */
	uint32_t threshold_2_high;
	/*
	 * [0x18] Threshold low 32 bits
	 * Threshold low 32 bits
	 * Reset: 0x0         Access: RW
	 */
	uint32_t threshold_3_low;
	/*
	 * [0x1c] Threshold high 32 bits
	 * Threshold high 32 bits
	 * Reset: 0x0         Access: RW
	 */
	uint32_t threshold_3_high;
	/*
	 * [0x20] Threshold low 32 bits
	 * Threshold low 32 bits
	 * Reset: 0x0         Access: RW
	 */
	uint32_t threshold_4_low;
	/*
	 * [0x24] Threshold high 32 bits
	 * Threshold high 32 bits
	 * Reset: 0x0         Access: RW
	 */
	uint32_t threshold_4_high;
	/*
	 * [0x28] Timeout low 32 bits
	 * Timeout low 32 bits
	 * Reset: 0x0         Access: RW
	 */
	uint32_t timeout_low;
	/*
	 * [0x2c] Timeout high 32 bits
	 * Threshold high 32 bits
	 * Reset: 0x0         Access: RW
	 */
	uint32_t timeout_high;
	/*
	 * [0x30] current time stamp low
	 * low 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t tstamp_low;
	/*
	 * [0x34] current time stamp high
	 * high 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t tstamp_high;
	/*
	 * [0x38] Monitor Busy entries count.
	 * Busy count of items within the tracked matrix.
	 * Reset: 0x0         Access: RO
	 */
	uint32_t busy_cnt;
	/* [0x3c] Misc setups */
	uint32_t monitorenable;
	/*
	 * [0x40] Category last event logged address
	 * logged address low 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_0_addr_low;
	/*
	 * [0x44] Category last event logged address
	 * logged address high 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_0_addr_high;
	/*
	 * [0x48] Category last event logged address
	 * logged address low 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_1_addr_low;
	/*
	 * [0x4c] Category last event logged address
	 * logged address high 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_1_addr_high;
	/*
	 * [0x50] Category last event logged address
	 * logged address low 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_2_addr_low;
	/*
	 * [0x54] Category last event logged address
	 * logged address high 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_2_addr_high;
	/*
	 * [0x58] Category last event logged address
	 * logged address low 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_3_addr_low;
	/*
	 * [0x5c] Category last event logged address
	 * logged address high 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_3_addr_high;
	/*
	 * [0x60] Category last event logged address
	 * logged address low 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_4_addr_low;
	/*
	 * [0x64] Category last event logged address
	 * logged address high 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_4_addr_high;
	/*
	 * [0x68] Category last event logged address
	 * logged address low 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_5_addr_low;
	/*
	 * [0x6c] Category last event logged address
	 * logged address high 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_5_addr_high;
	/*
	 * [0x70] Max latency transaction logged address
	 * logged address low 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t max_addr_low;
	/*
	 * [0x74] Max latency transaction logged address
	 * logged address high 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t max_addr_high;
	/*
	 * [0x78] Timeout latency transaction logged address
	 * logged address low 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t timeout_addr_low;
	/*
	 * [0x7c] Timeout latency transaction logged address
	 * logged address high 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t timeout_addr_high;
	/*
	 * [0x80] Category last event logged attributes
	 * logged attributes low 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_0_attr_low;
	/*
	 * [0x84] Category last event logged attributes
	 * logged attributes high 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_0_attr_high;
	/*
	 * [0x88] Category last event logged attributes
	 * logged attributes low 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_1_attr_low;
	/*
	 * [0x8c] Category last event logged attributes
	 * logged attributes high 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_1_attr_high;
	/*
	 * [0x90] Category last event logged attributes
	 * logged attributes low 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_2_attr_low;
	/*
	 * [0x94] Category last event logged attributes
	 * logged attributes high 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_2_attr_high;
	/*
	 * [0x98] Category last event logged attributes
	 * logged attributes low 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_3_attr_low;
	/*
	 * [0x9c] Category last event logged attributes
	 * logged attributes high 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_3_attr_high;
	/*
	 * [0xa0] Category last event logged attributes
	 * logged attributes low 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_4_attr_low;
	/*
	 * [0xa4] Category last event logged attributes
	 * logged attributes high 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_4_attr_high;
	/*
	 * [0xa8] Category last event logged attributes
	 * logged attributes low 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_5_attr_low;
	/*
	 * [0xac] Category last event logged attributes
	 * logged attributes high 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_5_attr_high;
	/*
	 * [0xb0] Max latency transaction logged attributes
	 * logged attributes low 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t max_attr_low;
	/*
	 * [0xb4] Max latency transaction logged attributes
	 * logged attributes high 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t max_attr_high;
	/*
	 * [0xb8] Timeout latency transaction logged attributes
	 * logged attributes low 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t timeout_attr_low;
	/*
	 * [0xbc] Timeout latency transaction logged attributes
	 * logged attributes high 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t timeout_attr_high;
	/*
	 * [0xc0] Category last event logged period
	 * logged period low 32 bits (in tstamp terms)
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_0_period_low;
	/*
	 * [0xc4] Category last event logged period
	 * logged period high 32 bits (in tstamp terms)
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_0_period_high;
	/*
	 * [0xc8] Category last event logged period
	 * logged period low 32 bits (in tstamp terms)
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_1_period_low;
	/*
	 * [0xcc] Category last event logged period
	 * logged period high 32 bits (in tstamp terms)
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_1_period_high;
	/*
	 * [0xd0] Category last event logged period
	 * logged period low 32 bits (in tstamp terms)
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_2_period_low;
	/*
	 * [0xd4] Category last event logged period
	 * logged period high 32 bits (in tstamp terms)
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_2_period_high;
	/*
	 * [0xd8] Category last event logged period
	 * logged period low 32 bits (in tstamp terms)
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_3_period_low;
	/*
	 * [0xdc] Category last event logged period
	 * logged period high 32 bits (in tstamp terms)
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_3_period_high;
	/*
	 * [0xe0] Category last event logged period
	 * logged period low 32 bits (in tstamp terms)
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_4_period_low;
	/*
	 * [0xe4] Category last event logged period
	 * logged period high 32 bits (in tstamp terms)
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_4_period_high;
	/*
	 * [0xe8] Category last event logged period
	 * logged period low 32 bits (in tstamp terms)
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_5_period_low;
	/*
	 * [0xec] Category last event logged period
	 * logged period high 32 bits (in tstamp terms)
	 * Reset: 0x0         Access: RO
	 */
	uint32_t zone_5_period_high;
	/*
	 * [0xf0] Max latency transaction logged period
	 * logged period low 32 bits (in tstamp terms)
	 * Reset: 0x0         Access: RO
	 */
	uint32_t max_period_low;
	/*
	 * [0xf4] Max latency transaction logged period
	 * logged period high 32 bits (in tstamp terms)
	 * Reset: 0x0         Access: RO
	 */
	uint32_t max_period_high;
	/*
	 * [0xf8] Timeout latency transaction logged period
	 * logged period low 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t timeout_period_low;
	/*
	 * [0xfc] Timeout latency transaction logged period
	 * logged period high 32 bits
	 * Reset: 0x0         Access: RO
	 */
	uint32_t timeout_period_high;
};

/*
 * Auxiliary register file for ELA AXI tracker vector building
 */
struct al_pmdt_axi_mon_trace_matrix {
	/* [0x0] Trace select - AXI field selection */
	uint32_t trc_sel0;
	/* [0x4] */
	uint32_t rsrvd_0;
};

/*
 * Event screening based on AXI fields to be matched
 */
struct al_pmdt_axi_mon_screen_matrix {
	/*
	 * [0x0] Bit Select
	 * bit select [31:0]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t scr_sel_0;
	/*
	 * [0x4] Bit Select
	 * bit select [63:32]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t scr_sel_1;
	/*
	 * [0x8] Bit Select
	 * bit select [95:64]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t scr_sel_2;
	/*
	 * [0xc] Bit Select
	 * bit select [127:96]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t scr_sel_3;
	/*
	 * [0x10] Bit Select
	 * bit select [159:128]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t scr_sel_4;
	/*
	 * [0x14] Bit Matching condition
	 * bit value for comparison [31:0]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t scr_val_0;
	/*
	 * [0x18] Bit Matching condition
	 * bit value for comparison [63:32]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t scr_val_1;
	/*
	 * [0x1c] Bit Matching condition
	 * bit value for comparison [95:64]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t scr_val_2;
	/*
	 * [0x20] Bit Matching condition
	 * bit value for comparison [127:96]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t scr_val_3;
	/*
	 * [0x24] Bit Matching condition
	 * bit value for comparison [159:128]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t scr_val_4;
	/* [0x28] */
	uint32_t rsrvd_0[6];
};

struct al_pmdt_axi_mon_regs {
	/* [0x0] AXI latency Tracker */
	struct al_pmdt_axi_mon_axi_mon axi_mon;
	/* [0x100] Auxiliary register file for ELA AXI tracker vector building */
	struct al_pmdt_axi_mon_trace_matrix trace_matrix[2];
	/* [0x110] */
	uint32_t rsrvd_0[60];
	/* [0x200] Event screening based on AXI fields to be matched */
	struct al_pmdt_axi_mon_screen_matrix screen_matrix[4];
	/* [0x300] */
	uint32_t rsrvd_1[16192];
};


/*
 * Registers Fields
 */

/**** monitorenable register ****/
/*
 * Tracker enable
 * Reset: 0x0         Access: RW
 */
#define PMDT_AXI_MON_AXI_MON_MONITORENABLE_ENABLE (1 << 0)
/*
 * Read tracker (otherwise - write tracker)
 * Reset: 0x0         Access: RW
 */
#define PMDT_AXI_MON_AXI_MON_MONITORENABLE_READ (1 << 1)
/*
 * Reserved
 * Reset: 0x0         Access: RW
 */
#define PMDT_AXI_MON_AXI_MON_MONITORENABLE_RSVD_3_2_MASK 0x0000000C
#define PMDT_AXI_MON_AXI_MON_MONITORENABLE_RSVD_3_2_SHIFT 2
/*
 * Log the first transaction that fits this category, rather than tracking the latest of this type.
 * Reset: 0x0         Access: RW
 */
#define PMDT_AXI_MON_AXI_MON_MONITORENABLE_LOG_FRST (1 << 4)
/*
 * If set - use cycle count terminology. Otherwise - use timestamp ticks counting.
 * Reset: 0x0         Access: RW
 */
#define PMDT_AXI_MON_AXI_MON_MONITORENABLE_USE_CYC_CNT (1 << 5)
/*
 * 00 - Transactions (classic mode). 01 - Requests Accept latency. 10 - Response Accept latency.
 * Reset: 0x0         Access: RW
 */
#define PMDT_AXI_MON_AXI_MON_MONITORENABLE_LOG_MODE_MASK 0x000000C0
#define PMDT_AXI_MON_AXI_MON_MONITORENABLE_LOG_MODE_SHIFT 6
/*
 * Select a Track(screening) bar Condition for the measured latency. Zero = free running all
 * transactions.
 * Reset: 0x0         Access: RW
 */
#define PMDT_AXI_MON_AXI_MON_MONITORENABLE_LOG_COND_MASK 0x0000FF00
#define PMDT_AXI_MON_AXI_MON_MONITORENABLE_LOG_COND_SHIFT 8
/*
 * Reserved
 * Reset: 0x0         Access: RW
 */
#define PMDT_AXI_MON_AXI_MON_MONITORENABLE_RSVD_23_16_MASK 0x00FF0000
#define PMDT_AXI_MON_AXI_MON_MONITORENABLE_RSVD_23_16_SHIFT 16
/*
 * Monitor outstanding level of the tracking system. Can be at transaction completion point or free
 * running clocks, as selected by bit [25]. Default cleared - track latency periods.
 * Reset: 0x0         Access: RW
 */
#define PMDT_AXI_MON_AXI_MON_MONITORENABLE_OUTSTAND_MON (1 << 24)
/*
 * Continuous (per cycle) tracking/monitoring of the outstanding status. If not set - event location
 * is at transaction completion as for the period monitoring
 * Reset: 0x0         Access: RW
 */
#define PMDT_AXI_MON_AXI_MON_MONITORENABLE_OUTSTAND_CONT (1 << 25)
/*
 * Reserved
 * Reset: 0x0         Access: RW
 */
#define PMDT_AXI_MON_AXI_MON_MONITORENABLE_RSVD_28_26_MASK 0x1C000000
#define PMDT_AXI_MON_AXI_MON_MONITORENABLE_RSVD_28_26_SHIFT 26
/*
 * Clear Timeout log
 * Reset: 0x0         Access: WO
 */
#define PMDT_AXI_MON_AXI_MON_MONITORENABLE_CLEAR_TIMEOUT (1 << 29)
/*
 * Clear Tracker transaction data base
 * Reset: 0x0         Access: WO
 */
#define PMDT_AXI_MON_AXI_MON_MONITORENABLE_CLEAR_DBASE (1 << 30)
/*
 * Clear Tracker results
 * Reset: 0x0         Access: WO
 */
#define PMDT_AXI_MON_AXI_MON_MONITORENABLE_CLEAR_MON (1 << 31)

/**** trc_sel0 register ****/
/*
 * Address field width, in bytes
 * Reset: 0x8         Access: RW
 */
#define PMDT_AXI_MON_TRACE_MATRIX_TRC_SEL0_ADDR_WIDTH_MASK 0x0000000F
#define PMDT_AXI_MON_TRACE_MATRIX_TRC_SEL0_ADDR_WIDTH_SHIFT 0
/*
 * Upper Address field if serving as tgtid, in bytes, in case partial address is selected below
 * Reset: 0x0         Access: RW
 */
#define PMDT_AXI_MON_TRACE_MATRIX_TRC_SEL0_TGTID_WIDTH_MASK 0x00000030
#define PMDT_AXI_MON_TRACE_MATRIX_TRC_SEL0_TGTID_WIDTH_SHIFT 4
/*
 * include the attributes field at the  request vector except user & id fields that were treated
 * separately
 * Reset: 0x1         Access: RW
 */
#define PMDT_AXI_MON_TRACE_MATRIX_TRC_SEL0_INCL_ATTR (1 << 6)
/*
 * include the last response lowest word of the bus, for debug identifiaction
 * Reset: 0x0         Access: RW
 */
#define PMDT_AXI_MON_TRACE_MATRIX_TRC_SEL0_INCL_DATA (1 << 7)
/*
 * AxID width, in bits
 * Reset: 0x8         Access: RW
 */
#define PMDT_AXI_MON_TRACE_MATRIX_TRC_SEL0_ID_WIDTH_MASK 0x00001F00
#define PMDT_AXI_MON_TRACE_MATRIX_TRC_SEL0_ID_WIDTH_SHIFT 8
/*
 * include the transaction byte count.
 * Reset: 0x1         Access: RW
 */
#define PMDT_AXI_MON_TRACE_MATRIX_TRC_SEL0_INCL_BCNT (1 << 13)
/*
 * include the tracking in-use level. (how many transactaions occupy the mechanism).
 * Reset: 0x0         Access: RW
 */
#define PMDT_AXI_MON_TRACE_MATRIX_TRC_SEL0_INCL_BUSY (1 << 14)
/*
 * enable this trace vector
 * Reset: 0x0         Access: RW
 */
#define PMDT_AXI_MON_TRACE_MATRIX_TRC_SEL0_ENABLE (1 << 15)
/*
 * AxUser field width, in bits
 * Reset: 0x0         Access: RW
 */
#define PMDT_AXI_MON_TRACE_MATRIX_TRC_SEL0_USER_WIDTH_MASK 0x001F0000
#define PMDT_AXI_MON_TRACE_MATRIX_TRC_SEL0_USER_WIDTH_SHIFT 16
/*
 * reserved
 * Reset: 0x0         Access: RW
 */
#define PMDT_AXI_MON_TRACE_MATRIX_TRC_SEL0_RSVD_23_21_MASK 0x00E00000
#define PMDT_AXI_MON_TRACE_MATRIX_TRC_SEL0_RSVD_23_21_SHIFT 21
/*
 * condition the trace on the screened event number. Map for each of the tracked events, up to 8
 * events. If zero - trace non-conditional.
 * Reset: 0x0         Access: RW
 */
#define PMDT_AXI_MON_TRACE_MATRIX_TRC_SEL0_TRK_COND_MASK 0xFF000000
#define PMDT_AXI_MON_TRACE_MATRIX_TRC_SEL0_TRK_COND_SHIFT 24

#ifdef __cplusplus
}
#endif

#endif

/** @} */
