/*
 * Copyright 2018, Amazon.com, Inc. or its affiliates. All Rights Reserved
 */

/**
 *  @{
 * @file   al_hal_eth_mac_v4_common_regs.h
 *
 * @brief eth_mac_v4_common registers
 *
 * This file was auto-generated by RegGen v1.2.1
 *
 */

#ifndef __AL_HAL_ETH_MAC_V4_COMMON_REGS_H__
#define __AL_HAL_ETH_MAC_V4_COMMON_REGS_H__

#include "al_hal_plat_types.h"

#ifdef __cplusplus
extern "C" {
#endif

/*
 * Unit Registers
 */

/*
 * Ethernet MPS Version register
 */
struct al_eth_mac_v4_common_gen_v4 {
	/* [0x0] Ethernet Controller Version */
	uint32_t version;
	/* [0x4] */
	uint32_t rsrvd_0[3];
	/* [0x10] PCS Config for all channels */
	uint32_t pcs_all_pin_cfg;
	/* [0x14] PCS Status for all channels */
	uint32_t pcs_all_pin_status;
	/* [0x18] */
	uint32_t rsrvd_1[2];
	/* [0x20] 100G PCS Pin Configuration */
	uint32_t pcs_100g_pin_cfg;
	/* [0x24] 100G PCS Pin Status (Only connected on Channel #0) */
	uint32_t pcs_100g_pin_status;
	/* [0x28] */
	uint32_t rsrvd_2[2];
	/* [0x30] PCS FEC Configuration */
	uint32_t pcs_fec_pin_cfg;
	/* [0x34] PCS FEC Status */
	uint32_t pcs_fec_pin_status;
	/* [0x38] */
	uint32_t rsrvd_3[2];
	/* [0x40] SERDES 40-bit interface shift configuration */
	uint32_t serdes_40_tx_shift;
	/* [0x44] SERDES 40-bit interface shift configuration (when swap is enabled) */
	uint32_t serdes_40_rx_shift;
	/* [0x48] SERDES 40-bit interface bit selection */
	uint32_t serdes_40_tx_sel;
	/* [0x4c] SERDES 40-bit interface bit selection */
	uint32_t serdes_40_rx_sel;
	/* [0x50] Gate top 20 bits of TX serdes data */
	uint32_t serdes_40_tx_gate_20b;
	/* [0x54] */
	uint32_t rsrvd_4[3];
	/* [0x60] Loss-Of-Signal controls for the 4 Serdes Lanes */
	uint32_t los;
	/* [0x64] AN/LT wrapper  control */
	uint32_t an_lt_ipregs_sel;
	/* [0x68] PCS Energy detect configuration */
	uint32_t pcs_energy_detect;
	/* [0x6c] PCS Signal detect configuration */
	uint32_t pcs_signal_detect;
	/* [0x70] PCS 100G block lock signal count configuration */
	uint32_t stat_cfg_pcs_block_lock;
	/* [0x74] PCS Counter edge selection */
	uint32_t stat_cfg_pcs;
	/* [0x78] PCS 50G Counter edge selection */
	uint32_t stat_cfg_fec;
	/* [0x7c] */
	uint32_t rsrvd_5;
	/* [0x80] LPI Tick mux configuration */
	uint32_t lpi_tick;
	/* [0x84] */
	uint32_t rsrvd_6[3];
	/* [0x90] PCS Status for all channels */
	uint32_t phy;
	/* [0x94] */
	uint32_t rsrvd_7[3];
	/* [0xa0] MAC Channel controls */
	uint32_t mac_ch;
	/* [0xa4] */
	uint32_t rsrvd_8[3];
	/* [0xb0] Interrupt source edge detection 0 */
	uint32_t int_cfg0;
	/* [0xb4] Interrupt source edge detection 1 */
	uint32_t int_cfg1;
	/* [0xb8] */
	uint32_t rsrvd_9[10];
	/*
	 * [0xe0] Scratch register 0
	 * Scratch value
	 * Reset: 0x0         Access: RW
	 */
	uint32_t scratch0;
	/*
	 * [0xe4] Scratch register 1
	 * Scratch value
	 * Reset: 0x0         Access: RW
	 */
	uint32_t scratch1;
	/* [0xe8] */
	uint32_t rsrvd_10[2];
	/*
	 * [0xf0] Spare registers. Reset to 0.
	 * Reset: 0x0         Access: RW
	 */
	uint32_t spare_zero_lo;
	/*
	 * [0xf4] Spare registers. Reset to 0.
	 * Reset: 0x0         Access: RW
	 */
	uint32_t spare_zero_hi;
	/*
	 * [0xf8] Spare registers. Reset to 1.
	 * Reset: 0xffffffff  Access: RW
	 */
	uint32_t spare_one_lo;
	/*
	 * [0xfc] Spare registers. Reset to 1.
	 * Reset: 0xffffffff  Access: RW
	 */
	uint32_t spare_one_hi;
};

/*
 * Global configuration for the MPS
 */
struct al_eth_mac_v4_common_gbl {
	/* [0x0] MPS Global Clock gating settings */
	uint32_t clock;
	/* [0x4] */
	uint32_t rsrvd_0[3];
	/* [0x10] MPS global reset settings */
	uint32_t reset;
	/* [0x14] */
	uint32_t rsrvd_1[3];
	/* [0x20] Functional Level Reset 0 settings */
	uint32_t flr_reset0;
	/* [0x24] Functional Level Reset 1 settings */
	uint32_t flr_reset1;
	/* [0x28] Functional Level Reset 2 Settings */
	uint32_t flr_reset2;
	/* [0x2c] Functional Level Reset 3 Settings */
	uint32_t flr_reset3;
	/* [0x30] */
	uint32_t rsrvd_2[52];
};

/*
 * MTIP Indirect register access to PCS and AN LT blocks
 */
struct al_eth_mac_v4_common_mtip {
	/* [0x0] */
	uint32_t pcs_fec91_addr;
	/* [0x4] */
	uint32_t pcs_fec91_data;
	/* [0x8] */
	uint32_t rsrvd_0[62];
};

/*
 * Statistics counters
 */
struct al_eth_mac_v4_common_stat_pcs {
	/*
	 * [0x0] PCS 100G align_lock counter
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t align_lock;
	/*
	 * [0x4] PCS 100G  Block lock counter (masked using pcs_block_lock_bus_mask)
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t block_lock_bus;
	/*
	 * [0x8] PCS 100G  Block lock counter (individual bit selected with pcs_block_lock_bit_sel)
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t block_lock_bit;
	/*
	 * [0xc] PCS 100G link status counter
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t link_status;
	/* [0x10] */
	uint32_t rsrvd_0[4];
	/*
	 * [0x20] PCS 50G link status counter for channel 0
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t xl_link_status0;
	/*
	 * [0x24] PCS 50G link status counter for channel 1
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t xl_link_status1;
	/*
	 * [0x28] PCS 50G link status counter for channel 2
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t xl_link_status2;
	/*
	 * [0x2c] PCS 50G link status counter for channel 3
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t xl_link_status3;
	/* [0x30] */
	uint32_t rsrvd_1[4];
	/*
	 * [0x40] PCS amps_lock 0 counter
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t amps_lock0;
	/*
	 * [0x44] PCS amps_lock 1 counter
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t amps_lock1;
	/*
	 * [0x48] PCS amps_lock 2 counter
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t amps_lock2;
	/*
	 * [0x4c] PCS amps_lock 3 counter
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t amps_lock3;
	/* [0x50] */
	uint32_t rsrvd_2[4];
	/*
	 * [0x60] RSFEC aligned 0 counter
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t rsfec_aligned0;
	/*
	 * [0x64] RSFEC aligned 1 counter
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t rsfec_aligned1;
	/*
	 * [0x68] RSFEC aligned 2 counter
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t rsfec_aligned2;
	/*
	 * [0x6c] RSFEC aligned 3 counter
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t rsfec_aligned3;
	/* [0x70] */
	uint32_t rsrvd_3[4];
	/*
	 * [0x80] PCS FEC Correctable error count for Virtual Lane 0
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_locked_0;
	/*
	 * [0x84] PCS FEC Correctable error count for Virtual Lane 1
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_locked_1;
	/*
	 * [0x88] PCS FEC Correctable error count for Virtual Lane 2
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_locked_2;
	/*
	 * [0x8c] PCS FEC Correctable error count for Virtual Lane 3
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_locked_3;
	/*
	 * [0x90] PCS FEC Correctable error count for Virtual Lane 4
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_locked_4;
	/*
	 * [0x94] PCS FEC Correctable error count for Virtual Lane 5
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_locked_5;
	/*
	 * [0x98] PCS FEC Correctable error count for Virtual Lane 6
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_locked_6;
	/*
	 * [0x9c] PCS FEC Correctable error count for Virtual Lane 7
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_locked_7;
	/* [0xa0] */
	uint32_t rsrvd_4[4];
	/*
	 * [0xb0] PCS FEC Correctable error count for Virtual Lane 0.
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_cerr_0;
	/*
	 * [0xb4] PCS FEC Correctable error count for Virtual Lane 1.
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_cerr_1;
	/*
	 * [0xb8] PCS FEC Correctable error count for Virtual Lane 2.
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_cerr_2;
	/*
	 * [0xbc] PCS FEC Correctable error count for Virtual Lane 3.
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_cerr_3;
	/*
	 * [0xc0] PCS FEC Correctable error count for Virtual Lane 4.
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_cerr_4;
	/*
	 * [0xc4] PCS FEC Correctable error count for Virtual Lane 5.
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_cerr_5;
	/*
	 * [0xc8] PCS FEC Correctable error count for Virtual Lane 6.
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_cerr_6;
	/*
	 * [0xcc] PCS FEC Correctable error count for Virtual Lane 7.
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_cerr_7;
	/* [0xd0] */
	uint32_t rsrvd_5[4];
	/*
	 * [0xe0] PCS FEC Non Correctable error count for Virtual Lane 0.
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_ncerr_0;
	/*
	 * [0xe4] PCS FEC Non Correctable error count for Virtual Lane 1.
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_ncerr_1;
	/*
	 * [0xe8] PCS FEC Non Correctable error count for Virtual Lane 2 .
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_ncerr_2;
	/*
	 * [0xec] PCS FEC Non Correctable error count for Virtual Lane 3 .
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_ncerr_3;
	/*
	 * [0xf0] PCS FEC Non Correctable error count for Virtual Lane 4 .
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_ncerr_4;
	/*
	 * [0xf4] PCS FEC Non Correctable error count for Virtual Lane 5.
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_ncerr_5;
	/*
	 * [0xf8] PCS FEC Non Correctable error count for Virtual Lane 6.
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_ncerr_6;
	/*
	 * [0xfc] PCS FEC Non Correctable error count for Virtual Lane 7.
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t fec_ncerr_7;
};

struct al_eth_mac_v4_common_regs {
	/* [0x0] Ethernet MPS Version register */
	struct al_eth_mac_v4_common_gen_v4 gen_v4;
	/* [0x100] Global configuration for the MPS */
	struct al_eth_mac_v4_common_gbl gbl;
	/* [0x200] MTIP Indirect register access to PCS and AN LT blocks */
	struct al_eth_mac_v4_common_mtip mtip;
	/* [0x300] Statistics counters */
	struct al_eth_mac_v4_common_stat_pcs stat_pcs;
	/* [0x400] */
	uint32_t rsrvd_0[16128];
};


/*
 * Registers Fields
 */

/**** version register ****/
/*
 * Revision number (Minor)
 * Reset: 0x0         Access: RO
 */
#define ETH_MAC_V4_COMMON_GEN_V4_VERSION_RELEASE_NUM_MINOR_MASK 0x000000FF
#define ETH_MAC_V4_COMMON_GEN_V4_VERSION_RELEASE_NUM_MINOR_SHIFT 0
/*
 * Revision number (Major)
 * Reset: 0x0         Access: RO
 */
#define ETH_MAC_V4_COMMON_GEN_V4_VERSION_RELEASE_NUM_MAJOR_MASK 0x0000FF00
#define ETH_MAC_V4_COMMON_GEN_V4_VERSION_RELEASE_NUM_MAJOR_SHIFT 8
/*
 * Date of release
 * Reset: 0x0         Access: RO
 */
#define ETH_MAC_V4_COMMON_GEN_V4_VERSION_DATE_DAY_MASK 0x001F0000
#define ETH_MAC_V4_COMMON_GEN_V4_VERSION_DATE_DAY_SHIFT 16
/*
 * Month of release
 * Reset: 0x0         Access: RO
 */
#define ETH_MAC_V4_COMMON_GEN_V4_VERSION_DATA_MONTH_MASK 0x01E00000
#define ETH_MAC_V4_COMMON_GEN_V4_VERSION_DATA_MONTH_SHIFT 21
/*
 * Year of release (starting from 2000)
 * Reset: 0x0         Access: RO
 */
#define ETH_MAC_V4_COMMON_GEN_V4_VERSION_DATE_YEAR_MASK 0x3E000000
#define ETH_MAC_V4_COMMON_GEN_V4_VERSION_DATE_YEAR_SHIFT 25
/*
 * Reserved
 * Reset: 0x0         Access: RO
 */
#define ETH_MAC_V4_COMMON_GEN_V4_VERSION_RESERVED_MASK 0xC0000000
#define ETH_MAC_V4_COMMON_GEN_V4_VERSION_RESERVED_SHIFT 30

/**** pcs_all_pin_cfg register ****/
/*
 * Controls 50G operation over 2 lanes (0 and 1)  in PCS.
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_CFG_RXLAUI_ENA_IN0 (1 << 0)
/*
 * Controls 50G operation over 2 lanes (3 and 2)  in PCS.
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_CFG_RXLAUI_ENA_IN2 (1 << 1)
/*
 * 1 = Enables 100G mode for 100G Channel with data spread over all lanes 0 to 3
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_CFG_PCS100_ENA_IN (1 << 2)
/*
 * 1 = Enables 40G mode for Channel 0
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_CFG_MODE40_ENA_IN (1 << 3)
/*
 * 1 = Enable duty cycle limit for data.
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_CFG_PACER_10G_MASK 0x000000F0
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_CFG_PACER_10G_SHIFT 4
/*
 * 1 = Enable MLG mode
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_CFG_MLG_ENA_IN (1 << 8)
/*
 * MLG mode configuration
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_CFG_MLG_LN_MODE_MASK 0x00000600
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_CFG_MLG_LN_MODE_SHIFT 9
/*
 * Serdes width config. 1 = 20-bit serdes interface, 0 = 40-bit serdes interface
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_CFG_SD_N2_MASK 0x0000F000
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_CFG_SD_N2_SHIFT 12
/*
 * 1 = reduce hi-ber timer to 100th of normal value, 0 = BER timer is normal value.
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_CFG_BER_TIMER_SHORT (1 << 16)

/**** pcs_all_pin_status register ****/
/*
 * 4 bit per lane tx decoupling buffer level threshold (5..7 depending on refclk)
 * Reset: 0x0         Access: RO
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_STATUS_TX_LANE_THRESH0_MASK 0x0000000F
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_STATUS_TX_LANE_THRESH0_SHIFT 0
/*
 * 4 bit per lane tx decoupling buffer level threshold (5..7 depending on refclk)
 * Reset: 0x0         Access: RO
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_STATUS_TX_LANE_THRESH1_MASK 0x000000F0
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_STATUS_TX_LANE_THRESH1_SHIFT 4
/*
 * 4 bit per lane tx decoupling buffer level threshold (5..7 depending on refclk)
 * Reset: 0x0         Access: RO
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_STATUS_TX_LANE_THRESH2_MASK 0x00000F00
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_STATUS_TX_LANE_THRESH2_SHIFT 8
/*
 * 4 bit per lane tx decoupling buffer level threshold (5..7 depending on refclk)
 * Reset: 0x0         Access: RO
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_STATUS_TX_LANE_THRESH3_MASK 0x0000F000
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_STATUS_TX_LANE_THRESH3_SHIFT 12
/*
 * Channel 0 Number of Active Lanes
 * Reset: 0x0         Access: RO
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_STATUS_PCS0_LANE_ACTIVE_MASK 0x000F0000
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_STATUS_PCS0_LANE_ACTIVE_SHIFT 16
/*
 * Channel 2 Number of Active Lanes
 * Reset: 0x0         Access: RO
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_STATUS_PCS2_LANE_ACTIVE_MASK 0x00300000
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ALL_PIN_STATUS_PCS2_LANE_ACTIVE_SHIFT 20

/**** pcs_100g_pin_cfg register ****/
/*
 * 1 = Do not descramble RX data, 0 = descramble.
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_100G_PIN_CFG_DESCR_BYPASS_100G (1 << 0)
/*
 * 1 = Do not scramble TX data, 0 = descramble.
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_100G_PIN_CFG_SCRAMBLER_BYPASS_100G (1 << 1)

/**** pcs_100g_pin_status register ****/
/*
 * 100G MAC block lock synchronisation
 * Reset: 0x0         Access: RO
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_100G_PIN_STATUS_BLOCK_LOCK_MASK 0x000FFFFF
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_100G_PIN_STATUS_BLOCK_LOCK_SHIFT 0
/*
 * 1 = Alignment markers of all virtual lanes locked onto.
 * Reset: 0x0         Access: RO
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_100G_PIN_STATUS_ALIGN_LOCK (1 << 20)
/*
 * High Bit Error Rate indication.
 * Reset: 0x0         Access: RO
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_100G_PIN_STATUS_HI_BER (1 << 24)
/*
 * Final link status for 100G PCS. Logical result of (align_lock & !hi_ber)
 * Reset: 0x0         Access: RO
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_100G_PIN_STATUS_LINK_STATUS (1 << 25)

/**** pcs_fec_pin_cfg register ****/
/*
 * Enable FEC91
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_FEC_PIN_CFG_FEC91_ENA_IN_MASK 0x0000000F
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_FEC_PIN_CFG_FEC91_ENA_IN_SHIFT 0
/*
 * Enable FEC91 on lanes 0, 1
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_FEC_PIN_CFG_FEC91_1LANE_IN0 (1 << 4)
/*
 * Enable FEC91 on lanes 2, 3
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_FEC_PIN_CFG_FEC91_1LANE_IN2 (1 << 5)
/*
 * Enable error propagation for FC74
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_FEC_PIN_CFG_FEC_ERR_ENA_MASK 0x00000F00
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_FEC_PIN_CFG_FEC_ERR_ENA_SHIFT 8
/*
 * Enable FC74
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_FEC_PIN_CFG_FEC_ENA_MASK 0x0000F000
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_FEC_PIN_CFG_FEC_ENA_SHIFT 12

/**** pcs_fec_pin_status register ****/
/*
 * RS-FEC Per-serdes codeword alignment
 * Reset: 0x0         Access: RO
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_FEC_PIN_STATUS_AMPS_LOCK_MASK 0x0000000F
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_FEC_PIN_STATUS_AMPS_LOCK_SHIFT 0
/*
 * RS-FEC alignment status for each channel
 * Reset: 0x0         Access: RO
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_FEC_PIN_STATUS_RSFEC_ALIGNED_MASK 0x000000F0
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_FEC_PIN_STATUS_RSFEC_ALIGNED_SHIFT 4
/*
 * Per FEC receive lock indication
 * Reset: 0x0         Access: RO
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_FEC_PIN_STATUS_FEC_LOCKED_MASK 0x0000FF00
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_FEC_PIN_STATUS_FEC_LOCKED_SHIFT 8

/**** serdes_40_tx_shift register ****/
/*
 * bit shift. Valid values are 0 to 40.
 * Reset: 0x14        Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_TX_SHIFT_SERDES_0_MASK 0x000000FF
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_TX_SHIFT_SERDES_0_SHIFT 0
/*
 * bit shift. Valid values are 0 to 40.
 * Reset: 0x14        Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_TX_SHIFT_SERDES_1_MASK 0x0000FF00
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_TX_SHIFT_SERDES_1_SHIFT 8
/*
 * bit shift. Valid values are 0 to 40.
 * Reset: 0x14        Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_TX_SHIFT_SERDES_2_MASK 0x00FF0000
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_TX_SHIFT_SERDES_2_SHIFT 16
/*
 * bit shift. Valid values are 0 to 40.
 * Reset: 0x14        Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_TX_SHIFT_SERDES_3_MASK 0xFF000000
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_TX_SHIFT_SERDES_3_SHIFT 24

/**** serdes_40_rx_shift register ****/
/*
 * bit shift. Valid values are 0 to 40.
 * Reset: 0x14        Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_RX_SHIFT_SERDES_0_MASK 0x000000FF
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_RX_SHIFT_SERDES_0_SHIFT 0
/*
 * bit shift. Valid values are 0 to 40.
 * Reset: 0x14        Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_RX_SHIFT_SERDES_1_MASK 0x0000FF00
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_RX_SHIFT_SERDES_1_SHIFT 8
/*
 * bit shift. Valid values are 0 to 40.
 * Reset: 0x14        Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_RX_SHIFT_SERDES_2_MASK 0x00FF0000
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_RX_SHIFT_SERDES_2_SHIFT 16
/*
 * bit shift. Valid values are 0 to 40.
 * Reset: 0x14        Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_RX_SHIFT_SERDES_3_MASK 0xFF000000
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_RX_SHIFT_SERDES_3_SHIFT 24

/**** serdes_40_tx_sel register ****/
/*
 * 0 - directly from serdes, 1 - swapped, 2 - swapped with shift, 3 - shifted
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_TX_SEL_SERDES_0_MASK 0x00000003
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_TX_SEL_SERDES_0_SHIFT 0
/*
 * 0 - directly from serdes, 1 - swapped, 2 - swapped with shift, 3 - shifted
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_TX_SEL_SERDES_1_MASK 0x00000030
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_TX_SEL_SERDES_1_SHIFT 4
/*
 * 0 - directly from serdes, 1 - swapped, 2 - swapped with shift, 3 - shifted
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_TX_SEL_SERDES_2_MASK 0x00000300
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_TX_SEL_SERDES_2_SHIFT 8
/*
 * 0 - directly from serdes, 1 - swapped, 2 - swapped with shift, 3 - shifted
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_TX_SEL_SERDES_3_MASK 0x00003000
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_TX_SEL_SERDES_3_SHIFT 12

/**** serdes_40_rx_sel register ****/
/*
 * 0 - directly from serdes, 1 - swapped, 2 - swapped with shift, 3 - shifted
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_RX_SEL_SERDES_0_MASK 0x00000003
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_RX_SEL_SERDES_0_SHIFT 0
/*
 * 0 - directly from serdes, 1 - swapped, 2 - swapped with shift, 3 - shifted
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_RX_SEL_SERDES_1_MASK 0x00000030
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_RX_SEL_SERDES_1_SHIFT 4
/*
 * 0 - directly from serdes, 1 - swapped, 2 - swapped with shift, 3 - shifted
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_RX_SEL_SERDES_2_MASK 0x00000300
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_RX_SEL_SERDES_2_SHIFT 8
/*
 * 0 - directly from serdes, 1 - swapped, 2 - swapped with shift, 3 - shifted
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_RX_SEL_SERDES_3_MASK 0x00003000
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_RX_SEL_SERDES_3_SHIFT 12

/**** serdes_40_tx_gate_20b register ****/
/*
 * 0 = Don't gate TX data [39:20], 1 = gate TX data [39:20]
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_TX_GATE_20B_SERDES_0 (1 << 0)
/*
 * 0 = Don't gate TX data [39:20], 1 = gate TX data [39:20]
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_TX_GATE_20B_SERDES_1 (1 << 4)
/*
 * 0 = Don't gate TX data [39:20], 1 = gate TX data [39:20]
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_TX_GATE_20B_SERDES_2 (1 << 8)
/*
 * 0 = Don't gate TX data [39:20], 1 = gate TX data [39:20]
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_SERDES_40_TX_GATE_20B_SERDES_3 (1 << 12)

/**** los register ****/
/*
 * Onehot mask for serdes lane LOS signals to send to MAC Channel 0
 * Reset: 0x1         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_LOS_MASK_CH0_MASK 0x0000000F
#define ETH_MAC_V4_COMMON_GEN_V4_LOS_MASK_CH0_SHIFT 0
/*
 * Onehot mask for serdes lane LOS signals to send to MAC Channel 1
 * Reset: 0x2         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_LOS_MASK_CH1_MASK 0x000000F0
#define ETH_MAC_V4_COMMON_GEN_V4_LOS_MASK_CH1_SHIFT 4
/*
 * Onehot mask for serdes lane LOS signals to send to MAC Channel 2
 * Reset: 0x4         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_LOS_MASK_CH2_MASK 0x00000F00
#define ETH_MAC_V4_COMMON_GEN_V4_LOS_MASK_CH2_SHIFT 8
/*
 * Onehot mask for serdes lane LOS signals to send to MAC Channel 3
 * Reset: 0x8         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_LOS_MASK_CH3_MASK 0x0000F000
#define ETH_MAC_V4_COMMON_GEN_V4_LOS_MASK_CH3_SHIFT 12
/*
 * Select whether to use PHY LOS or AN_LT LOS (1 = AN_LT, 0 = PHY) for MAC Channel 0
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_LOS_AN_LT_SEL_CH0 (1 << 16)
/*
 * Select whether to use PHY LOS or AN_LT LOS (1 = AN_LT, 0 = PHY) for MAC Channel 1
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_LOS_AN_LT_SEL_CH1 (1 << 17)
/*
 * Select whether to use PHY LOS or AN_LT LOS (1 = AN_LT, 0 = PHY) for MAC Channel 2
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_LOS_AN_LT_SEL_CH2 (1 << 18)
/*
 * Select whether to use PHY LOS or AN_LT LOS (1 = AN_LT, 0 = PHY) for MAC Channel 3
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_LOS_AN_LT_SEL_CH3 (1 << 19)

/**** an_lt_ipregs_sel register ****/
/*
 * Select which AN_LT lane within the ch_sel0 channel t connect AN_LT 0 to.
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_AN_LT_IPREGS_SEL_LANE_SEL0_MASK 0x00000003
#define ETH_MAC_V4_COMMON_GEN_V4_AN_LT_IPREGS_SEL_LANE_SEL0_SHIFT 0
/*
 * Select which channel to connect to the AN_LT 0 registers to.
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_AN_LT_IPREGS_SEL_CH_SEL0_MASK 0x00000030
#define ETH_MAC_V4_COMMON_GEN_V4_AN_LT_IPREGS_SEL_CH_SEL0_SHIFT 4
/*
 * Select which AN_LT lane within the ch_sel1 channel t connect AN_LT 1 to.
 * Reset: 0x1         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_AN_LT_IPREGS_SEL_LANE_SEL1_MASK 0x00000300
#define ETH_MAC_V4_COMMON_GEN_V4_AN_LT_IPREGS_SEL_LANE_SEL1_SHIFT 8
/*
 * Select which channel to connect to the AN_LT 1 registers to.
 * Reset: 0x1         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_AN_LT_IPREGS_SEL_CH_SEL1_MASK 0x00003000
#define ETH_MAC_V4_COMMON_GEN_V4_AN_LT_IPREGS_SEL_CH_SEL1_SHIFT 12
/*
 * Select which AN_LT lane within the ch_sel2 channel t connect AN_LT 2 to.
 * Reset: 0x2         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_AN_LT_IPREGS_SEL_LANE_SEL2_MASK 0x00030000
#define ETH_MAC_V4_COMMON_GEN_V4_AN_LT_IPREGS_SEL_LANE_SEL2_SHIFT 16
/*
 * Select which channel to connect to the AN_LT 2 registers to.
 * Reset: 0x2         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_AN_LT_IPREGS_SEL_CH_SEL2_MASK 0x00300000
#define ETH_MAC_V4_COMMON_GEN_V4_AN_LT_IPREGS_SEL_CH_SEL2_SHIFT 20
/*
 * Select which AN_LT lane within the ch_sel3 channel t connect AN_LT 3 to.
 * Reset: 0x3         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_AN_LT_IPREGS_SEL_LANE_SEL3_MASK 0x03000000
#define ETH_MAC_V4_COMMON_GEN_V4_AN_LT_IPREGS_SEL_LANE_SEL3_SHIFT 24
/*
 * Select which channel to connect to the AN_LT 3 registers to.
 * Reset: 0x3         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_AN_LT_IPREGS_SEL_CH_SEL3_MASK 0x30000000
#define ETH_MAC_V4_COMMON_GEN_V4_AN_LT_IPREGS_SEL_CH_SEL3_SHIFT 28

/**** pcs_energy_detect register ****/
/*
 * PCS energy detect source: 0 = def, 1 = SRD signal_det, 2 = mac_gpio_LOS, 3 =
 * inverted_mac_gpio_LOS (CH0)
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ENERGY_DETECT_SEL_CH0_MASK 0x00000003
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ENERGY_DETECT_SEL_CH0_SHIFT 0
/*
 * PCS energy detect default value, used when sel = 0 (CH0)
 * Reset: 0x1         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ENERGY_DETECT_DEF_CH0 (1 << 2)
/*
 * PCS energy detect polarity invert. 1 = invert polarity, 0 = same polarity (CH0)
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ENERGY_DETECT_POL_CH0 (1 << 3)
/*
 * PCS energy detect source: 0 = def, 1 = SRD signal_det, 2 = mac_gpio_LOS, 3 =
 * inverted_mac_gpio_LOS (CH1)
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ENERGY_DETECT_SEL_CH1_MASK 0x00000030
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ENERGY_DETECT_SEL_CH1_SHIFT 4
/*
 * PCS energy detect default value, used when sel = 0 (CH1)
 * Reset: 0x1         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ENERGY_DETECT_DEF_CH1 (1 << 6)
/*
 * PCS energy detect polarity invert. 1 = invert polarity, 0 = same polarity (CH1)
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ENERGY_DETECT_POL_CH1 (1 << 7)
/*
 * PCS energy detect source: 0 = def, 1 = SRD signal_det, 2 = mac_gpio_LOS, 3 =
 * inverted_mac_gpio_LOS (CH2)
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ENERGY_DETECT_SEL_CH2_MASK 0x00000300
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ENERGY_DETECT_SEL_CH2_SHIFT 8
/*
 * PCS energy detect default value, used when sel = 0 (CH2)
 * Reset: 0x1         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ENERGY_DETECT_DEF_CH2 (1 << 10)
/*
 * PCS energy detect polarity invert. 1 = invert polarity, 0 = same polarity (CH2)
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ENERGY_DETECT_POL_CH2 (1 << 11)
/*
 * PCS energy detect source: 0 = def, 1 = SRD signal_det, 2 = mac_gpio_LOS, 3 =
 * inverted_mac_gpio_LOS (CH3)
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ENERGY_DETECT_SEL_CH3_MASK 0x00003000
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ENERGY_DETECT_SEL_CH3_SHIFT 12
/*
 * PCS energy detect default value, used when sel = 0 (CH3)
 * Reset: 0x1         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ENERGY_DETECT_DEF_CH3 (1 << 14)
/*
 * PCS energy detect polarity invert. 1 = invert polarity, 0 = same polarity (CH3)
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_ENERGY_DETECT_POL_CH3 (1 << 15)

/**** pcs_signal_detect register ****/
/*
 * PCS signal detect source: 0 = def, 1 = SRD signal_det, 2 = mac_gpio_los, 3 =
 * inverted_mac_gpio_los (CH0)
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_SIGNAL_DETECT_SEL_CH0_MASK 0x00000003
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_SIGNAL_DETECT_SEL_CH0_SHIFT 0
/*
 * PCS signal detect default value, used when sel = 0 (CH0)
 * Reset: 0x1         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_SIGNAL_DETECT_DEF_CH0 (1 << 2)
/*
 * PCS signal detect polarity invert. 1 = invert polarity, 0 = same polarity (CH0)
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_SIGNAL_DETECT_POL_CH0 (1 << 3)
/*
 * PCS signal detect source: 0 = def, 1 = SRD signal_det, 2 = mac_gpio_los, 3 =
 * inverted_mac_gpio_los (CH1)
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_SIGNAL_DETECT_SEL_CH1_MASK 0x00000030
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_SIGNAL_DETECT_SEL_CH1_SHIFT 4
/*
 * PCS signal detect default value, used when sel = 0 (CH1)
 * Reset: 0x1         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_SIGNAL_DETECT_DEF_CH1 (1 << 6)
/*
 * PCS signal detect polarity invert. 1 = invert polarity, 0 = same polarity (CH1)
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_SIGNAL_DETECT_POL_CH1 (1 << 7)
/*
 * PCS signal detect source: 0 = def, 1 = SRD signal_det, 2 = mac_gpio_los, 3 =
 * inverted_mac_gpio_los (CH2)
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_SIGNAL_DETECT_SEL_CH2_MASK 0x00000300
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_SIGNAL_DETECT_SEL_CH2_SHIFT 8
/*
 * PCS signal detect default value, used when sel = 0 (CH2)
 * Reset: 0x1         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_SIGNAL_DETECT_DEF_CH2 (1 << 10)
/*
 * PCS signal detect polarity invert. 1 = invert polarity, 0 = same polarity (CH2)
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_SIGNAL_DETECT_POL_CH2 (1 << 11)
/*
 * PCS signal detect source: 0 = def, 1 = SRD signal_det, 2 = mac_gpio_los, 3 =
 * inverted_mac_gpio_los (CH3)
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_SIGNAL_DETECT_SEL_CH3_MASK 0x00003000
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_SIGNAL_DETECT_SEL_CH3_SHIFT 12
/*
 * PCS signal detect default value, used when sel = 0 (CH3)
 * Reset: 0x1         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_SIGNAL_DETECT_DEF_CH3 (1 << 14)
/*
 * PCS signal detect polarity invert. 1 = invert polarity, 0 = same polarity (CH3)
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PCS_SIGNAL_DETECT_POL_CH3 (1 << 15)

/**** stat_cfg_pcs_block_lock register ****/
/*
 * Selects which bit of the pcs block_lock signal to count on the pcs_block_lock_bit counter
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_PCS_BLOCK_LOCK_BIT_SEL_MASK 0x0000001F
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_PCS_BLOCK_LOCK_BIT_SEL_SHIFT 0
/*
 * Mask to apply to the block_lock bus before counting on the pcs_block_lock_bus counter
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_PCS_BLOCK_LOCK_BUS_MASK_MASK 0x0FFFFF00
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_PCS_BLOCK_LOCK_BUS_MASK_SHIFT 8

/**** stat_cfg_pcs register ****/
/*
 * 0 = disabled, 1 = rising edges, 2 = falling edges, 3 = both edges.
 * Reset: 0x3         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_PCS_ALIGN_LOCK_MASK 0x00000003
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_PCS_ALIGN_LOCK_SHIFT 0
/*
 * 0 = disabled, 1 = rising edges, 2 = falling edges, 3 = both edges.
 * Reset: 0x3         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_PCS_BLOCK_LOCK_BUS_MASK 0x00000030
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_PCS_BLOCK_LOCK_BUS_SHIFT 4
/*
 * 0 = disabled, 1 = rising edges, 2 = falling edges, 3 = both edges.
 * Reset: 0x3         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_PCS_BLOCK_LOCK_BIT_MASK 0x00000300
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_PCS_BLOCK_LOCK_BIT_SHIFT 8
/*
 * 0 = disabled, 1 = rising edges, 2 = falling edges, 3 = both edges.
 * Reset: 0x3         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_PCS_LINK_STATUS_MASK 0x00003000
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_PCS_LINK_STATUS_SHIFT 12
/*
 * 0 = disabled, 1 = rising edges, 2 = falling edges, 3 = both edges.
 * Reset: 0x3         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_PCS_XL_LINK_STATUS_MASK 0x00030000
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_PCS_XL_LINK_STATUS_SHIFT 16
/*
 * 0 = disabled, 1 = rising edges, 2 = falling edges, 3 = both edges.
 * Reset: 0x3         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_PCS_RSFEC_ALIGNED_MASK 0x00300000
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_PCS_RSFEC_ALIGNED_SHIFT 20
/*
 * 0 = disabled, 1 = rising edges, 2 = falling edges, 3 = both edges.
 * Reset: 0x3         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_PCS_AMPS_LOCK_MASK 0x03000000
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_PCS_AMPS_LOCK_SHIFT 24
/*
 * 0 = disabled, 1 = rising edges, 2 = falling edges, 3 = both edges.
 * Reset: 0x3         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_PCS_RX_LPI_ACTIVE_MASK 0x30000000
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_PCS_RX_LPI_ACTIVE_SHIFT 28

/**** stat_cfg_fec register ****/
/*
 * 0 = disabled, 1 = rising edges, 2 = falling edges, 3 = both edges.
 * Reset: 0x3         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_FEC_LOCKED_MASK 0x00000003
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_FEC_LOCKED_SHIFT 0
/*
 * 0 = disabled, 1 = rising edges, 2 = falling edges, 3 = both edges.  Mistakenly connected to
 * `ncerr` edge block in MPS v4.0
 * Reset: 0x1         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_FEC_CERR_MASK 0x00000030
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_FEC_CERR_SHIFT 4
/*
 * 0 = disabled, 1 = rising edges, 2 = falling edges, 3 = both edges. Mistakenly connected to `cerr`
 * edge block in MPS v4.0
 * Reset: 0x1         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_FEC_NCERR_MASK 0x00000300
#define ETH_MAC_V4_COMMON_GEN_V4_STAT_CFG_FEC_NCERR_SHIFT 8

/**** lpi_tick register ****/
/*
 * Select which MAC CH LPI timer to connect to PCS #0 lpi tick
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_LPI_TICK_SEL0_MASK 0x00000003
#define ETH_MAC_V4_COMMON_GEN_V4_LPI_TICK_SEL0_SHIFT 0
/*
 * Select which MAC CH LPI timer to connect to PCS #1 lpi tick
 * Reset: 0x1         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_LPI_TICK_SEL1_MASK 0x00000030
#define ETH_MAC_V4_COMMON_GEN_V4_LPI_TICK_SEL1_SHIFT 4
/*
 * Select which MAC CH LPI timer to connect to PCS #2 lpi tick
 * Reset: 0x2         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_LPI_TICK_SEL2_MASK 0x00000300
#define ETH_MAC_V4_COMMON_GEN_V4_LPI_TICK_SEL2_SHIFT 8
/*
 * Select which MAC CH LPI timer to connect to PCS #3 lpi tick
 * Reset: 0x3         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_LPI_TICK_SEL3_MASK 0x00003000
#define ETH_MAC_V4_COMMON_GEN_V4_LPI_TICK_SEL3_SHIFT 12

/**** phy register ****/
/*
 * MAC Channel Loss-of-signal
 * Reset: 0x0         Access: RO
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PHY_MAC_CH_LOS_MASK 0x0000000F
#define ETH_MAC_V4_COMMON_GEN_V4_PHY_MAC_CH_LOS_SHIFT 0
/*
 * PCS Energy detect pin status
 * Reset: 0x0         Access: RO
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PHY_PCS_ENERGY_DETECT_MASK 0x000000F0
#define ETH_MAC_V4_COMMON_GEN_V4_PHY_PCS_ENERGY_DETECT_SHIFT 4
/*
 * PCS Signal detect pin status
 * Reset: 0x0         Access: RO
 */
#define ETH_MAC_V4_COMMON_GEN_V4_PHY_PCS_SIGNAL_DETECT_MASK 0x00000F00
#define ETH_MAC_V4_COMMON_GEN_V4_PHY_PCS_SIGNAL_DETECT_SHIFT 8

/**** mac_ch register ****/
/*
 * [0] controls channel 0, [1] controls channel 1, etc. 1 = RX Data gated to Ethernet Controller, 0
 * = no gate.
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_MAC_CH_RX_GATE_MASK 0x0000000F
#define ETH_MAC_V4_COMMON_GEN_V4_MAC_CH_RX_GATE_SHIFT 0
/*
 * [0] controls channel 0, [1] controls channel 1, etc. 1 = TX Data gated from Ethernet Controller,
 * 0 = no gate.
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_MAC_CH_TX_GATE_MASK 0x00000F00
#define ETH_MAC_V4_COMMON_GEN_V4_MAC_CH_TX_GATE_SHIFT 8
/*
 * [0] controls channel 0, [1] controls channel 1, etc. 1 = Loopback enabled, 0 = loopback disabled
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_MAC_CH_LOOPBACK_MASK 0x000F0000
#define ETH_MAC_V4_COMMON_GEN_V4_MAC_CH_LOOPBACK_SHIFT 16

/**** int_cfg0 register ****/
/*
 * 0 = disabled, 1 = rising edges, 2 = falling edges, 3 = both edges.
 * Reset: 0x3         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_INT_CFG0_PCS_SIGNAL_DETECT_MASK 0x00000003
#define ETH_MAC_V4_COMMON_GEN_V4_INT_CFG0_PCS_SIGNAL_DETECT_SHIFT 0
/*
 * 0 = disabled, 1 = rising edges, 2 = falling edges, 3 = both edges.
 * Reset: 0x3         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_INT_CFG0_PCS_ENERGY_DETECT_MASK 0x00000030
#define ETH_MAC_V4_COMMON_GEN_V4_INT_CFG0_PCS_ENERGY_DETECT_SHIFT 4
/*
 * 0 = disabled, 1 = rising edges, 2 = falling edges, 3 = both edges.
 * Reset: 0x3         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_INT_CFG0_MAC_CH_LOS_MASK 0x00000300
#define ETH_MAC_V4_COMMON_GEN_V4_INT_CFG0_MAC_CH_LOS_SHIFT 8
/*
 * 0 = disabled, 1 = rising edges, 2 = falling edges, 3 = both edges.
 * Reset: 0x3         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_INT_CFG0_PCS_FEC91_PAR_ERR_MASK 0x00003000
#define ETH_MAC_V4_COMMON_GEN_V4_INT_CFG0_PCS_FEC91_PAR_ERR_SHIFT 12
/*
 * 0 = disabled, 1 = rising edges, 2 = falling edges, 3 = both edges.
 * Reset: 0x3         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_INT_CFG0_PCS_FEC74_PAR_ERR_MASK 0x00030000
#define ETH_MAC_V4_COMMON_GEN_V4_INT_CFG0_PCS_FEC74_PAR_ERR_SHIFT 16
/*
 * 0 = disabled, 1 = rising edges, 2 = falling edges, 3 = both edges.
 * Reset: 0x3         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_INT_CFG0_PCS_DESKEW_PAR_ERR_MASK 0x00300000
#define ETH_MAC_V4_COMMON_GEN_V4_INT_CFG0_PCS_DESKEW_PAR_ERR_SHIFT 20
/*
 * 0 = disabled, 1 = rising edges, 2 = falling edges, 3 = both edges.
 * Reset: 0x3         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_INT_CFG0_PCS_BER_TIMER_DONE_MASK 0x03000000
#define ETH_MAC_V4_COMMON_GEN_V4_INT_CFG0_PCS_BER_TIMER_DONE_SHIFT 24
/*
 * 0 = disabled, 1 = rising edges, 2 = falling edges, 3 = both edges.
 * Reset: 0x3         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_INT_CFG0_PCS_BER_TIMER_DONE100_MASK 0x30000000
#define ETH_MAC_V4_COMMON_GEN_V4_INT_CFG0_PCS_BER_TIMER_DONE100_SHIFT 28

/**** int_cfg1 register ****/
/*
 * 0 = disabled, 1 = rising edges, 2 = falling edges, 3 = both edges.
 * Reset: 0x3         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_INT_CFG1_PCS_BLOCK_LOCK_MASK 0x00000003
#define ETH_MAC_V4_COMMON_GEN_V4_INT_CFG1_PCS_BLOCK_LOCK_SHIFT 0
/*
 * 0 = disabled, 1 = rising edges, 2 = falling edges, 3 = both edges.
 * Reset: 0x3         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_INT_CFG1_PCS_HI_BER_MASK 0x00000030
#define ETH_MAC_V4_COMMON_GEN_V4_INT_CFG1_PCS_HI_BER_SHIFT 4
/*
 * 0 = disabled, 1 = rising edges, 2 = falling edges, 3 = both edges.
 * Reset: 0x3         Access: RW
 */
#define ETH_MAC_V4_COMMON_GEN_V4_INT_CFG1_PCS_XL_HI_BER_MASK 0x00000300
#define ETH_MAC_V4_COMMON_GEN_V4_INT_CFG1_PCS_XL_HI_BER_SHIFT 8

/**** clock register ****/
/*
 * 50G MAC Channel clock enables (1 =clock running, 0 = clock gated).
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_CLOCK_MAC_50G_CLK_EN_MASK 0x0000000F
#define ETH_MAC_V4_COMMON_GBL_CLOCK_MAC_50G_CLK_EN_SHIFT 0
/*
 * 100G MAC clock enables (1 =clock running, 0 = clock gated).
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_CLOCK_MAC_100G_CLK_EN (1 << 4)
/*
 * PCS Clock enable (applies to all 50G and 100G channels).  (1 =clock running, 0 = clock gated).
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_CLOCK_PCS_CLK_EN (1 << 8)
/*
 * AN_LT Clock enables (1 = clock running, 0 = clock gated).
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_CLOCK_AN_LT_CLK_EN_MASK 0x0000F000
#define ETH_MAC_V4_COMMON_GBL_CLOCK_AN_LT_CLK_EN_SHIFT 12

/**** reset register ****/
/*
 * 50G MAC core logic Channel Reset (1 - reset, 0 = normal operation).
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_RESET_MAC_50G_CORE_RST_EN_MASK 0x0000000F
#define ETH_MAC_V4_COMMON_GBL_RESET_MAC_50G_CORE_RST_EN_SHIFT 0
/*
 * 100G MAC core logic Reset bits (1 = reset, 0 = normal operation).
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_RESET_MAC_100G_CORE_RST_EN (1 << 4)
/*
 * PCS core logic reset (applies to all 50G and 100G channels). 1 = Reset, 0 = Normal operation.
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_RESET_PCS_CORE_RST_EN (1 << 8)
/*
 * AN_LT core logic reset (1 = reset, 0 = normal operation)
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_RESET_AN_LT_CORE_RST_EN_MASK 0x0000F000
#define ETH_MAC_V4_COMMON_GBL_RESET_AN_LT_CORE_RST_EN_SHIFT 12
/*
 * 50G  Duolog Registers reset bits (1 - reset, 0 = normal operation).
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_RESET_MAC_50G_REGS_RST_EN_MASK 0x000F0000
#define ETH_MAC_V4_COMMON_GBL_RESET_MAC_50G_REGS_RST_EN_SHIFT 16
/*
 * 100G Duolog Registers reset bits (1 = reset, 0 = normal operation).
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_RESET_MAC_100G_REGS_RST_EN (1 << 20)
/*
 * PCS Registers Reset (applies to all 50G and 100G channels). 1 = Reset, 0 = Normal operation.
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_RESET_PCS_REGS_RST_EN (1 << 24)
/*
 * AN_LT Registers reset (1 = reset, 0 = normal operation)
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_RESET_AN_LT_REGS_RST_EN_MASK 0xF0000000
#define ETH_MAC_V4_COMMON_GBL_RESET_AN_LT_REGS_RST_EN_SHIFT 28

/**** flr_reset0 register ****/
/*
 * 50G MAC core logic Channel Reset (1 - reset, 0 = normal operation).
 * Reset: 0x1         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET0_MAC_50G_CORE_RST_EN_MASK 0x0000000F
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET0_MAC_50G_CORE_RST_EN_SHIFT 0
/*
 * 100G MAC core logic Reset bits (1 = reset, 0 = normal operation).
 * Reset: 0x1         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET0_MAC_100G_CORE_RST_EN (1 << 4)
/*
 * PCS core logic reset (applies to all 50G and 100G channels). 1 = Reset, 0 = Normal operation.
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET0_PCS_CORE_RST_EN (1 << 8)
/*
 * AN_LT core logic reset (1 = reset, 0 = normal operation)
 * Reset: 0x1         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET0_AN_LT_CORE_RST_EN_MASK 0x0000F000
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET0_AN_LT_CORE_RST_EN_SHIFT 12
/*
 * 50G  Duolog Registers reset bits (1 - reset, 0 = normal operation).
 * Reset: 0x1         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET0_MAC_50G_REGS_RST_EN_MASK 0x000F0000
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET0_MAC_50G_REGS_RST_EN_SHIFT 16
/*
 * 100G Duolog Registers reset bits (1 = reset, 0 = normal operation).
 * Reset: 0x1         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET0_MAC_100G_REGS_RST_EN (1 << 20)
/*
 * PCS Registers Reset (applies to all 50G and 100G channels). 1 = Reset, 0 = Normal operation.
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET0_PCS_REGS_RST_EN (1 << 24)
/*
 * AN_LT Registers reset (1 = reset, 0 = normal operation)
 * Reset: 0x1         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET0_AN_LT_REGS_RST_EN_MASK 0xF0000000
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET0_AN_LT_REGS_RST_EN_SHIFT 28

/**** flr_reset1 register ****/
/*
 * 50G MAC core logic Channel Reset (1 - reset, 0 = normal operation).
 * Reset: 0x2         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET1_MAC_50G_CORE_RST_EN_MASK 0x0000000F
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET1_MAC_50G_CORE_RST_EN_SHIFT 0
/*
 * 100G MAC core logic Reset bits (1 = reset, 0 = normal operation).
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET1_MAC_100G_CORE_RST_EN (1 << 4)
/*
 * PCS core logic reset (applies to all 50G and 100G channels). 1 = Reset, 0 = Normal operation.
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET1_PCS_CORE_RST_EN (1 << 8)
/*
 * AN_LT core logic reset (1 = reset, 0 = normal operation)
 * Reset: 0x2         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET1_AN_LT_CORE_RST_EN_MASK 0x0000F000
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET1_AN_LT_CORE_RST_EN_SHIFT 12
/*
 * 50G  Duolog Registers reset bits (1 - reset, 0 = normal operation).
 * Reset: 0x2         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET1_MAC_50G_REGS_RST_EN_MASK 0x000F0000
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET1_MAC_50G_REGS_RST_EN_SHIFT 16
/*
 * 100G Duolog Registers reset bits (1 = reset, 0 = normal operation).
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET1_MAC_100G_REGS_RST_EN (1 << 20)
/*
 * PCS Registers Reset (applies to all 50G and 100G channels). 1 = Reset, 0 = Normal operation.
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET1_PCS_REGS_RST_EN (1 << 24)
/*
 * AN_LT Registers reset (1 = reset, 0 = normal operation)
 * Reset: 0x2         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET1_AN_LT_REGS_RST_EN_MASK 0xF0000000
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET1_AN_LT_REGS_RST_EN_SHIFT 28

/**** flr_reset2 register ****/
/*
 * 50G MAC core logic Channel Reset (1 - reset, 0 = normal operation).
 * Reset: 0x4         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET2_MAC_50G_CORE_RST_EN_MASK 0x0000000F
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET2_MAC_50G_CORE_RST_EN_SHIFT 0
/*
 * 100G MAC core logic Reset bits (1 = reset, 0 = normal operation).
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET2_MAC_100G_CORE_RST_EN (1 << 4)
/*
 * PCS core logic reset (applies to all 50G and 100G channels). 1 = Reset, 0 = Normal operation.
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET2_PCS_CORE_RST_EN (1 << 8)
/*
 * AN_LT core logic reset (1 = reset, 0 = normal operation)
 * Reset: 0x4         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET2_AN_LT_CORE_RST_EN_MASK 0x0000F000
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET2_AN_LT_CORE_RST_EN_SHIFT 12
/*
 * 50G  Duolog Registers reset bits (1 - reset, 0 = normal operation).
 * Reset: 0x4         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET2_MAC_50G_REGS_RST_EN_MASK 0x000F0000
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET2_MAC_50G_REGS_RST_EN_SHIFT 16
/*
 * 100G Duolog Registers reset bits (1 = reset, 0 = normal operation).
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET2_MAC_100G_REGS_RST_EN (1 << 20)
/*
 * PCS Registers Reset (applies to all 50G and 100G channels). 1 = Reset, 0 = Normal operation.
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET2_PCS_REGS_RST_EN (1 << 24)
/*
 * AN_LT Registers reset (1 = reset, 0 = normal operation)
 * Reset: 0x4         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET2_AN_LT_REGS_RST_EN_MASK 0xF0000000
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET2_AN_LT_REGS_RST_EN_SHIFT 28

/**** flr_reset3 register ****/
/*
 * 50G MAC core logic Channel Reset (1 - reset, 0 = normal operation).
 * Reset: 0x8         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET3_MAC_50G_CORE_RST_EN_MASK 0x0000000F
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET3_MAC_50G_CORE_RST_EN_SHIFT 0
/*
 * 100G MAC core logic Reset bits (1 = reset, 0 = normal operation).
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET3_MAC_100G_CORE_RST_EN (1 << 4)
/*
 * PCS core logic reset (applies to all 50G and 100G channels). 1 = Reset, 0 = Normal operation.
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET3_PCS_CORE_RST_EN (1 << 8)
/*
 * AN_LT core logic reset (1 = reset, 0 = normal operation)
 * Reset: 0x8         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET3_AN_LT_CORE_RST_EN_MASK 0x0000F000
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET3_AN_LT_CORE_RST_EN_SHIFT 12
/*
 * 50G  Duolog Registers reset bits (1 - reset, 0 = normal operation).
 * Reset: 0x8         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET3_MAC_50G_REGS_RST_EN_MASK 0x000F0000
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET3_MAC_50G_REGS_RST_EN_SHIFT 16
/*
 * 100G Duolog Registers reset bits (1 = reset, 0 = normal operation).
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET3_MAC_100G_REGS_RST_EN (1 << 20)
/*
 * PCS Registers Reset (applies to all 50G and 100G channels). 1 = Reset, 0 = Normal operation.
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET3_PCS_REGS_RST_EN (1 << 24)
/*
 * AN_LT Registers reset (1 = reset, 0 = normal operation)
 * Reset: 0x8         Access: RW
 */
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET3_AN_LT_REGS_RST_EN_MASK 0xF0000000
#define ETH_MAC_V4_COMMON_GBL_FLR_RESET3_AN_LT_REGS_RST_EN_SHIFT 28

/**** pcs_fec91_addr register ****/
/*
 * MTIP PCS FEC91 Address. Byte addressed and 16-bit word aligned.
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_MTIP_PCS_FEC91_ADDR_VAL_MASK 0x000001FF
#define ETH_MAC_V4_COMMON_MTIP_PCS_FEC91_ADDR_VAL_SHIFT 0

/**** pcs_fec91_data register ****/
/*
 * MTIP PCS FEC91 Data (16 bits)
 * Reset: 0x0         Access: RW
 */
#define ETH_MAC_V4_COMMON_MTIP_PCS_FEC91_DATA_VAL_MASK 0x0000FFFF
#define ETH_MAC_V4_COMMON_MTIP_PCS_FEC91_DATA_VAL_SHIFT 0

#ifdef __cplusplus
}
#endif

#endif

/** @} */
