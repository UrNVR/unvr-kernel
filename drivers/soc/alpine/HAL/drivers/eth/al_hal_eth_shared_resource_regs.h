/*
 * Copyright 2018, Amazon.com, Inc. or its affiliates. All Rights Reserved
 */

/**
 *  @{
 * @file   al_hal_eth_shared_resource_regs.h
 *
 * @brief eth_shared_resource registers
 *
 * This file was auto-generated by RegGen v1.2.1
 *
 */

#ifndef __AL_HAL_ETH_SHARED_RESOURCE_REGS_H__
#define __AL_HAL_ETH_SHARED_RESOURCE_REGS_H__

#include "al_hal_plat_types.h"

#ifdef __cplusplus
extern "C" {
#endif

/*
 * Unit Registers
 */

/*
 * General Ethernet Shared resources configurations
 */
struct al_eth_shared_resource_gen {
	/* [0x0] Shared resource regfile version */
	uint32_t version;
	/* [0x4] */
	uint32_t axi_slave;
	/* [0x8] memory controller */
	uint32_t mem_ctrl;
	/* [0xc] */
	uint32_t rsrvd_0[29];
};

/*
 * Ethernet Shared resource regfile spare bits
 */
struct al_eth_shared_resource_spare {
	/*
	 * [0x0] spare bits reset value 0
	 * Reset: 0x0         Access: RW
	 */
	uint32_t zero;
	/*
	 * [0x4] spare bits reset value 1
	 * Reset: 0xffffffff  Access: RW
	 */
	uint32_t one;
};

/*
 * this is to have spare int triggers inisde INT controller for ECO
 */
struct al_eth_shared_resource_irqs {
	/*
	 * [0x0] this is to have spare int triggers inisde INT controller for ECO
	 * Reset: 0x0         Access: RW
	 */
	uint32_t reserved;
};

/*
 * RX FIFO, per EC FIFO allocation
 */
struct al_eth_shared_resource_rxf {
	/* [0x0] RXF data fifo 1 */
	uint32_t data_fifo_1;
	/* [0x4] RXF info (sop/eop) fifo 1 */
	uint32_t info_fifo_1;
	/* [0x8] RXF data fifo 2 (loopback) */
	uint32_t data_fifo_2;
	/* [0xc] RXF info (sop/eop) fifo 2 (loopback) */
	uint32_t info_fifo_2;
};

/*
 * what EC indication to put in the AXS info
 */
struct al_eth_shared_resource_rxf_port_mapping {
	/* [0x0] */
	uint32_t port_indication;
};

/*
 * AXI Slave
 */
struct al_eth_shared_resource_axi_slave {
	/* [0x0] AXI slave memory partition */
	uint32_t cfg;
	/* [0x4] */
	uint32_t rsrvd_0[63];
};

struct al_eth_shared_resource_rfw_pipe_ctl {
	/* [0x0] */
	uint32_t vf_tcam_fifo_ctl;
	/* [0x4] */
	uint32_t fdir_tcam_fifo_ctl;
	/* [0x8] */
	uint32_t add_hold_to_every_phase_out;
	/* [0xc] */
	uint32_t reg_in_ready_set_when_stage_empty_out;
};

/*
 * this RBA control the protection domain of RFW tables, each table has SW/HW agents that each one
 * can access zero based and with protection domain. Here base/size can configured per ec and when
 * violation occur each write/read port has register status
 */
struct al_eth_shared_resource_rfw_table_ctl {
	/*
	 * [0x0]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t table_base_ec0;
	/*
	 * [0x4]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t table_base_ec1;
	/*
	 * [0x8]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t table_base_ec2;
	/*
	 * [0xc]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t table_base_ec3;
	/*
	 * [0x10]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t table_size_ec0;
	/*
	 * [0x14]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t table_size_ec1;
	/*
	 * [0x18]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t table_size_ec2;
	/*
	 * [0x1c]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t table_size_ec3;
	/* [0x20] */
	uint32_t table_cfg;
	/* [0x24] */
	uint32_t rd_violation;
	/* [0x28] */
	uint32_t wr_violation;
	/* [0x2c] */
	uint32_t rsrvd_0;
};

struct al_eth_shared_resource_rfw_reg_crdt_base {
	/* [0x0] */
	uint32_t sw_reset;
	/* [0x4] */
	uint32_t rx_init_bus;
	/* [0x8] */
	uint32_t tx_init_bus;
	/*
	 * [0xc] [15:0]   - ec0 default value - 100
	 * [31:16] - ec1 default value - 100
	 * Reset: 0x6400064   Access: RW
	 */
	uint32_t rx_delay_init_0;
	/*
	 * [0x10] [15:0]   - ec2 default value - 100
	 * [31:16] - ec3 default value - 100
	 * Reset: 0x6400064   Access: RW
	 */
	uint32_t rx_delay_init_1;
	/*
	 * [0x14] [15:0]   - ec0 default value - 100
	 * [31:16] - ec1 default value - 100
	 * Reset: 0x6400064   Access: RW
	 */
	uint32_t tx_delay_init_0;
	/*
	 * [0x18] [15:0]   - ec2 default value - 100
	 * [31:16] - ec3 default value - 100
	 * Reset: 0x6400064   Access: RW
	 */
	uint32_t tx_delay_init_1;
	/* [0x1c] */
	uint32_t arb_cfg_0;
	/* [0x20] 2 bits per EC */
	uint32_t arb_cfg_1;
};

struct al_eth_shared_resource_rxf_maping {
	/* [0x0] */
	uint32_t rxf_2_ec_en;
	/* [0x4] */
	uint32_t seq_num;
	/* [0x8] */
	uint32_t rx_udma_fifo;
	/* [0xc] */
	uint32_t rrd_ts;
	/* [0x10] */
	uint32_t rsrvd_0[4];
};

struct al_eth_shared_resource_reg {
	/* [0x0] */
	uint32_t vf_tcam;
	/* [0x4] */
	uint32_t vf_tcam_init;
	/* [0x8] */
	uint32_t fdir_tcam;
	/* [0xc] */
	uint32_t fdir_tcam_init;
	/* [0x10] */
	uint32_t csp_tcam;
	/* [0x14] */
	uint32_t csp_tcam_init;
};

/*
 * TCAM (0-7) - VF
 * TCAM (8-10) FDIR
 * TCAM 11 - CSP
 */
struct al_eth_shared_resource_reg_tcam_core_ctl {
	/* [0x0] */
	uint32_t bist;
	/* [0x4] */
	uint32_t bist_tmg_mode;
};

struct al_eth_shared_resource_axs_dwrr_arb_ctrl {
	/* [0x0] */
	uint32_t arb_config;
	/* [0x4] */
	uint32_t cred_level;
	/* [0x8] */
	uint32_t cred_grant;
	/* [0xc] */
	uint32_t sop_cost;
	/* [0x10] */
	uint32_t eop_cost;
	/* [0x14] */
	uint32_t data_cost;
};

struct al_eth_shared_resource_regs {
	/* [0x0] 4 groups of interrupts */
	uint32_t mem_par_int_ctrl_mem[64];
	/* [0x100] 4 groups of interrupts */
	uint32_t func_int_ctrl_mem[64];
	/* [0x200] General Ethernet Shared resources configurations */
	struct al_eth_shared_resource_gen gen;
	/* [0x280] Ethernet Shared resource regfile spare bits */
	struct al_eth_shared_resource_spare spare[4];
	/* [0x2a0] this is to have spare int triggers inisde INT controller for ECO */
	struct al_eth_shared_resource_irqs irqs;
	/* [0x2a4] */
	uint32_t rsrvd_0[23];
	/* [0x300] RX FIFO, per EC FIFO allocation */
	struct al_eth_shared_resource_rxf rxf[4];
	/* [0x340] */
	uint32_t rsrvd_1[20];
	/* [0x390] what EC indication to put in the AXS info */
	struct al_eth_shared_resource_rxf_port_mapping rxf_port_mapping;
	/* [0x394] */
	uint32_t rsrvd_2[27];
	/* [0x400] AXI Slave */
	struct al_eth_shared_resource_axi_slave axi_slave;
	/* [0x500] */
	struct al_eth_shared_resource_rfw_pipe_ctl rfw_pipe_ctl;
	/* [0x510] */
	uint32_t rsrvd_3[4];
	/*
	 * [0x520] this RBA control the protection domain of RFW tables, each table has SW/HW agents
	 * that each one can access zero based and with protection domain. Here base/size can
	 * configured per ec and when violation occur each write/read port has register status
	 */
	struct al_eth_shared_resource_rfw_table_ctl rfw_table_ctl[19];
	/* [0x8b0] */
	struct al_eth_shared_resource_rfw_reg_crdt_base rfw_reg_crdt_base;
	/* [0x8d4] */
	uint32_t rsrvd_4[11];
	/* [0x900] */
	struct al_eth_shared_resource_rxf_maping rxf_maping;
	/* [0x920] */
	struct al_eth_shared_resource_reg reg;
	/* [0x938] */
	uint32_t rsrvd_5[18];
	/*
	 * [0x980] TCAM (0-7) - VF
	 * TCAM (8-10) FDIR
	 * TCAM 11 - CSP
	 */
	struct al_eth_shared_resource_reg_tcam_core_ctl reg_tcam_core_ctl[12];
	/* [0x9e0] */
	uint32_t rsrvd_6[8];
	/* [0xa00] */
	struct al_eth_shared_resource_axs_dwrr_arb_ctrl axs_dwrr_arb_ctrl;
	/* [0xa18] */
	uint32_t rsrvd_7[378];
	/* [0x1000] */
	uint32_t csp_shared_mem[1024];
	/* [0x2000] */
	uint32_t rsrvd_8[14336];
};


/*
 * Registers Fields
 */

/**** version register ****/
/*
 * Revision number (Minor)
 * Reset: 0x1         Access: RO
 */
#define ETH_SHARED_RESOURCE_GEN_VERSION_RELEASE_NUM_MINOR_MASK 0x000000FF
#define ETH_SHARED_RESOURCE_GEN_VERSION_RELEASE_NUM_MINOR_SHIFT 0
/*
 * Revision number (Major)
 * Reset: 0x0         Access: RO
 */
#define ETH_SHARED_RESOURCE_GEN_VERSION_RELEASE_NUM_MAJOR_MASK 0x0000FF00
#define ETH_SHARED_RESOURCE_GEN_VERSION_RELEASE_NUM_MAJOR_SHIFT 8
/*
 * Date of release
 * Reset: 0x0         Access: RO
 */
#define ETH_SHARED_RESOURCE_GEN_VERSION_DATE_DAY_MASK 0x001F0000
#define ETH_SHARED_RESOURCE_GEN_VERSION_DATE_DAY_SHIFT 16
/*
 * Month of release
 * Reset: 0x0         Access: RO
 */
#define ETH_SHARED_RESOURCE_GEN_VERSION_DATA_MONTH_MASK 0x01E00000
#define ETH_SHARED_RESOURCE_GEN_VERSION_DATA_MONTH_SHIFT 21
/*
 * Year of release (starting from 2000)
 * Reset: 0x0         Access: RO
 */
#define ETH_SHARED_RESOURCE_GEN_VERSION_DATE_YEAR_MASK 0x3E000000
#define ETH_SHARED_RESOURCE_GEN_VERSION_DATE_YEAR_SHIFT 25
/*
 * Reserved
 * Reset: 0x0         Access: RO
 */
#define ETH_SHARED_RESOURCE_GEN_VERSION_RESERVED_MASK 0xC0000000
#define ETH_SHARED_RESOURCE_GEN_VERSION_RESERVED_SHIFT 30

/**** axi_slave register ****/
/*
 * axi -> apb SM clear
 * Reset: 0x0         Access: RW
 */
#define ETH_SHARED_RESOURCE_GEN_AXI_SLAVE_CFG_ETH_FSM_CLEAR (1 << 0)
/*
 * axi -> apb FIFOs clear
 * Reset: 0x0         Access: RW
 */
#define ETH_SHARED_RESOURCE_GEN_AXI_SLAVE_CFG_ETH_FIFOS_CLEAR (1 << 1)
/*
 * axi -> apb WRR counter
 * Reset: 0x0         Access: RW
 */
#define ETH_SHARED_RESOURCE_GEN_AXI_SLAVE_CFG_ETH_WRR_CNT_MASK 0x0000001C
#define ETH_SHARED_RESOURCE_GEN_AXI_SLAVE_CFG_ETH_WRR_CNT_SHIFT 2
/*
 * read slave error enable
 * Reset: 0x0         Access: RW
 */
#define ETH_SHARED_RESOURCE_GEN_AXI_SLAVE_CFG_RD_SLV_ERR_EN (1 << 5)
/*
 * write slave error enable
 * Reset: 0x0         Access: RW
 */
#define ETH_SHARED_RESOURCE_GEN_AXI_SLAVE_CFG_WR_SLV_ERR_EN (1 << 6)

/**** mem_ctrl register ****/
/*
 * memories shutdown
 * Reset: 0x0         Access: RW
 */
#define ETH_SHARED_RESOURCE_GEN_MEM_CTRL_SD (1 << 0)
/*
 * rxf fifo memory init hw trigger
 * Reset: 0x1         Access: RW
 */
#define ETH_SHARED_RESOURCE_GEN_MEM_CTRL_RXF_FIFO_MEM_INIT_TRIG (1 << 1)

/**** data_fifo_1 register ****/
/*
 * first entry offset
 * Reset: 0x0         Access: RW
 */
#define ETH_SHARED_RESOURCE_RXF_DATA_FIFO_1_DEPTH_BASE_MASK 0x00007FFF
#define ETH_SHARED_RESOURCE_RXF_DATA_FIFO_1_DEPTH_BASE_SHIFT 0
/*
 * depth
 * Reset: 0x4000      Access: RW
 */
#define ETH_SHARED_RESOURCE_RXF_DATA_FIFO_1_DEPTH_MASK 0xFFFF0000
#define ETH_SHARED_RESOURCE_RXF_DATA_FIFO_1_DEPTH_SHIFT 16

/**** info_fifo_1 register ****/
/*
 * first entry offset
 * Reset: 0x0         Access: RW
 */
#define ETH_SHARED_RESOURCE_RXF_INFO_FIFO_1_DEPTH_BASE_MASK 0x00003FFF
#define ETH_SHARED_RESOURCE_RXF_INFO_FIFO_1_DEPTH_BASE_SHIFT 0
/*
 * depth
 * Reset: 0x1000      Access: RW
 */
#define ETH_SHARED_RESOURCE_RXF_INFO_FIFO_1_DEPTH_MASK 0x7FFF0000
#define ETH_SHARED_RESOURCE_RXF_INFO_FIFO_1_DEPTH_SHIFT 16

/**** data_fifo_2 register ****/
/*
 * first entry offset
 * Reset: 0x4000      Access: RW
 */
#define ETH_SHARED_RESOURCE_RXF_DATA_FIFO_2_DEPTH_BASE_MASK 0x00007FFF
#define ETH_SHARED_RESOURCE_RXF_DATA_FIFO_2_DEPTH_BASE_SHIFT 0
/*
 * depth
 * Reset: 0x1000      Access: RW
 */
#define ETH_SHARED_RESOURCE_RXF_DATA_FIFO_2_DEPTH_MASK 0xFFFF0000
#define ETH_SHARED_RESOURCE_RXF_DATA_FIFO_2_DEPTH_SHIFT 16

/**** info_fifo_2 register ****/
/*
 * first entry offset
 * Reset: 0x1000      Access: RW
 */
#define ETH_SHARED_RESOURCE_RXF_INFO_FIFO_2_DEPTH_BASE_MASK 0x00003FFF
#define ETH_SHARED_RESOURCE_RXF_INFO_FIFO_2_DEPTH_BASE_SHIFT 0
/*
 * depth
 * Reset: 0x1000      Access: RW
 */
#define ETH_SHARED_RESOURCE_RXF_INFO_FIFO_2_DEPTH_MASK 0x7FFF0000
#define ETH_SHARED_RESOURCE_RXF_INFO_FIFO_2_DEPTH_SHIFT 16

/**** port_indication register ****/
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_RXF_PORT_MAPPING_PORT_INDICATION_RXF0_LB_MASK 0x00000003
#define ETH_SHARED_RESOURCE_RXF_PORT_MAPPING_PORT_INDICATION_RXF0_LB_SHIFT 0
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_RXF_PORT_MAPPING_PORT_INDICATION_RXF0_MAC_MASK 0x0000000C
#define ETH_SHARED_RESOURCE_RXF_PORT_MAPPING_PORT_INDICATION_RXF0_MAC_SHIFT 2
/* Reset: 0x1         Access: RW */
#define ETH_SHARED_RESOURCE_RXF_PORT_MAPPING_PORT_INDICATION_RXF1_LB_MASK 0x00000030
#define ETH_SHARED_RESOURCE_RXF_PORT_MAPPING_PORT_INDICATION_RXF1_LB_SHIFT 4
/* Reset: 0x1         Access: RW */
#define ETH_SHARED_RESOURCE_RXF_PORT_MAPPING_PORT_INDICATION_RXF1_MAC_MASK 0x000000C0
#define ETH_SHARED_RESOURCE_RXF_PORT_MAPPING_PORT_INDICATION_RXF1_MAC_SHIFT 6
/* Reset: 0x2         Access: RW */
#define ETH_SHARED_RESOURCE_RXF_PORT_MAPPING_PORT_INDICATION_RXF2_LB_MASK 0x00000300
#define ETH_SHARED_RESOURCE_RXF_PORT_MAPPING_PORT_INDICATION_RXF2_LB_SHIFT 8
/* Reset: 0x2         Access: RW */
#define ETH_SHARED_RESOURCE_RXF_PORT_MAPPING_PORT_INDICATION_RXF2_MAC_MASK 0x00000C00
#define ETH_SHARED_RESOURCE_RXF_PORT_MAPPING_PORT_INDICATION_RXF2_MAC_SHIFT 10
/* Reset: 0x3         Access: RW */
#define ETH_SHARED_RESOURCE_RXF_PORT_MAPPING_PORT_INDICATION_RXF3_LB_MASK 0x00003000
#define ETH_SHARED_RESOURCE_RXF_PORT_MAPPING_PORT_INDICATION_RXF3_LB_SHIFT 12
/* Reset: 0x3         Access: RW */
#define ETH_SHARED_RESOURCE_RXF_PORT_MAPPING_PORT_INDICATION_RXF3_MAC_MASK 0x0000C000
#define ETH_SHARED_RESOURCE_RXF_PORT_MAPPING_PORT_INDICATION_RXF3_MAC_SHIFT 14

/**** cfg register ****/
/*
 * first entry offset
 * Reset: 0x0         Access: RW
 */
#define ETH_SHARED_RESOURCE_AXI_SLAVE_CFG_DEPTH_BASE_MASK 0x00007FFF
#define ETH_SHARED_RESOURCE_AXI_SLAVE_CFG_DEPTH_BASE_SHIFT 0
/*
 * depth
 * Reset: 0x0         Access: RW
 */
#define ETH_SHARED_RESOURCE_AXI_SLAVE_CFG_DEPTH_MASK 0xFFFF0000
#define ETH_SHARED_RESOURCE_AXI_SLAVE_CFG_DEPTH_SHIFT 16

/**** vf_tcam_fifo_ctl register ****/
/* Reset: 0x7         Access: RW */
#define ETH_SHARED_RESOURCE_RFW_PIPE_CTL_VF_TCAM_FIFO_CTL_FIFO_ENABLE_MASK 0x00000007
#define ETH_SHARED_RESOURCE_RFW_PIPE_CTL_VF_TCAM_FIFO_CTL_FIFO_ENABLE_SHIFT 0

/**** fdir_tcam_fifo_ctl register ****/
/* Reset: 0x7         Access: RW */
#define ETH_SHARED_RESOURCE_RFW_PIPE_CTL_FDIR_TCAM_FIFO_CTL_FIFO_ENABLE_MASK 0x00000007
#define ETH_SHARED_RESOURCE_RFW_PIPE_CTL_FDIR_TCAM_FIFO_CTL_FIFO_ENABLE_SHIFT 0

/**** add_hold_to_every_phase_out register ****/
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_RFW_PIPE_CTL_ADD_HOLD_TO_EVERY_PHASE_OUT_VAL_MASK 0x0000000F
#define ETH_SHARED_RESOURCE_RFW_PIPE_CTL_ADD_HOLD_TO_EVERY_PHASE_OUT_VAL_SHIFT 0

/**** reg_in_ready_set_when_stage_empty_out register ****/
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_RFW_PIPE_CTL_REG_IN_READY_SET_WHEN_STAGE_EMPTY_OUT_VAL_MASK 0x0000000F
#define ETH_SHARED_RESOURCE_RFW_PIPE_CTL_REG_IN_READY_SET_WHEN_STAGE_EMPTY_OUT_VAL_SHIFT 0

/**** table_cfg register ****/
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_RFW_TABLE_CTL_TABLE_CFG_HW_PROTECTION_EN (1 << 0)
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_RFW_TABLE_CTL_TABLE_CFG_HW_ZERO_BASED (1 << 1)
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_RFW_TABLE_CTL_TABLE_CFG_SW_PROTECTION_EN (1 << 2)
/* Reset: 0x1         Access: RW */
#define ETH_SHARED_RESOURCE_RFW_TABLE_CTL_TABLE_CFG_SW_ZERO_BASED (1 << 3)

/**** rd_violation register ****/
/*
 * Latch problematic address that created the violation
 * Reset: 0x0         Access: RO
 */
#define ETH_SHARED_RESOURCE_RFW_TABLE_CTL_RD_VIOLATION_ADDR_MASK 0x000FFFFF
#define ETH_SHARED_RESOURCE_RFW_TABLE_CTL_RD_VIOLATION_ADDR_SHIFT 0
/*
 * From which EC transcation arrived
 * Reset: 0x0         Access: RO
 */
#define ETH_SHARED_RESOURCE_RFW_TABLE_CTL_RD_VIOLATION_EC_MASK 0x00300000
#define ETH_SHARED_RESOURCE_RFW_TABLE_CTL_RD_VIOLATION_EC_SHIFT 20
/*
 * 1'b1 - means HW access
 * 1'b0 - means SW access
 * Reset: 0x0         Access: RO
 */
#define ETH_SHARED_RESOURCE_RFW_TABLE_CTL_RD_VIOLATION_AGENT_TYPE (1 << 28)
/*
 * expose zero based register per relevant agent
 * Reset: 0x0         Access: RO
 */
#define ETH_SHARED_RESOURCE_RFW_TABLE_CTL_RD_VIOLATION_AGENT_ZERO_BASED (1 << 29)
/*
 * expose protection register per relevant agent
 * Reset: 0x0         Access: RO
 */
#define ETH_SHARED_RESOURCE_RFW_TABLE_CTL_RD_VIOLATION_AGENT_PROTECTION_EN (1 << 30)
/*
 * indicates if violation has occured
 * Reset: 0x0         Access: RO
 */
#define ETH_SHARED_RESOURCE_RFW_TABLE_CTL_RD_VIOLATION_VIOLATION_OCCUR (1 << 31)

/**** wr_violation register ****/
/*
 * Latch problematic address that created the violation
 * Reset: 0x0         Access: RO
 */
#define ETH_SHARED_RESOURCE_RFW_TABLE_CTL_WR_VIOLATION_ADDR_MASK 0x000FFFFF
#define ETH_SHARED_RESOURCE_RFW_TABLE_CTL_WR_VIOLATION_ADDR_SHIFT 0
/*
 * From which EC transcation arrived
 * Reset: 0x0         Access: RO
 */
#define ETH_SHARED_RESOURCE_RFW_TABLE_CTL_WR_VIOLATION_EC_MASK 0x00300000
#define ETH_SHARED_RESOURCE_RFW_TABLE_CTL_WR_VIOLATION_EC_SHIFT 20
/*
 * 1'b1 - means HW access
 * 1'b0 - means SW access
 * Reset: 0x0         Access: RO
 */
#define ETH_SHARED_RESOURCE_RFW_TABLE_CTL_WR_VIOLATION_AGENT_TYPE (1 << 28)
/*
 * expose zero based register per relevant agent
 * Reset: 0x0         Access: RO
 */
#define ETH_SHARED_RESOURCE_RFW_TABLE_CTL_WR_VIOLATION_AGENT_ZERO_BASED (1 << 29)
/*
 * expose protection register per relevant agent
 * Reset: 0x0         Access: RO
 */
#define ETH_SHARED_RESOURCE_RFW_TABLE_CTL_WR_VIOLATION_AGENT_PROTECTION_EN (1 << 30)
/*
 * indicates if violation has occured
 * Reset: 0x0         Access: RO
 */
#define ETH_SHARED_RESOURCE_RFW_TABLE_CTL_WR_VIOLATION_VIOLATION_OCCUR (1 << 31)

/**** sw_reset register ****/
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_SW_RESET_RX_MASK 0x0000000F
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_SW_RESET_RX_SHIFT 0
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_SW_RESET_TX_MASK 0x000000F0
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_SW_RESET_TX_SHIFT 4

/**** rx_init_bus register ****/
/*
 * [6:0]   - ec0 default value - 8
 * [13:7] - ec1 default value -8
 * [20:14] - ec2 default value - 8
 * [27:21] - ec3 default value - 8
 * Reset: 0x1020408   Access: RW
 */
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_RX_INIT_BUS_VAL_MASK 0x0FFFFFFF
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_RX_INIT_BUS_VAL_SHIFT 0

/**** tx_init_bus register ****/
/*
 * [6:0]   - ec0 default value - 64
 * [13:7] - ec1 default value - 64
 * [20:14] - ec2 default value - 64
 * [27:21] - ec3 default value - 64
 * Reset: 0x8102040   Access: RW
 */
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_TX_INIT_BUS_VAL_MASK 0x0FFFFFFF
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_TX_INIT_BUS_VAL_SHIFT 0

/**** arb_cfg_0 register ****/
/* Reset: 0x1         Access: RW */
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_ARB_CFG_0_ARB_EN (1 << 0)
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_ARB_CFG_0_TDM_ARB_TYPE (1 << 1)
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_ARB_CFG_0_TDM_ARB (1 << 2)
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_ARB_CFG_0_SOFT_RESET_MASK 0x00000078
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_ARB_CFG_0_SOFT_RESET_SHIFT 3
/* Reset: 0xf         Access: RW */
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_ARB_CFG_0_CNT_RST_SEL_MASK 0x00000780
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_ARB_CFG_0_CNT_RST_SEL_SHIFT 7
/* Reset: 0xf         Access: RW */
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_ARB_CFG_0_USER_EN_MASK 0x00007800
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_ARB_CFG_0_USER_EN_SHIFT 11

/**** arb_cfg_1 register ****/
/* Reset: 0x55        Access: RW */
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_ARB_CFG_1_CNT_MAX_RST_MASK 0x000000FF
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_ARB_CFG_1_CNT_MAX_RST_SHIFT 0
/* Reset: 0x55        Access: RW */
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_ARB_CFG_1_CNT_MAX_VAL_MASK 0x0000FF00
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_ARB_CFG_1_CNT_MAX_VAL_SHIFT 8
/* Reset: 0x55        Access: RW */
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_ARB_CFG_1_WEIGHT_MASK 0x00FF0000
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_ARB_CFG_1_WEIGHT_SHIFT 16
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_ARB_CFG_1_PRIORITY_MASK 0xFF000000
#define ETH_SHARED_RESOURCE_RFW_REG_CRDT_BASE_ARB_CFG_1_PRIORITY_SHIFT 24

/**** rxf_2_ec_en register ****/
/* Reset: 0x8         Access: RW */
#define ETH_SHARED_RESOURCE_RXF_MAPING_RXF_2_EC_EN_EC3_MASK 0x0000000F
#define ETH_SHARED_RESOURCE_RXF_MAPING_RXF_2_EC_EN_EC3_SHIFT 0
/* Reset: 0x4         Access: RW */
#define ETH_SHARED_RESOURCE_RXF_MAPING_RXF_2_EC_EN_EC2_MASK 0x000000F0
#define ETH_SHARED_RESOURCE_RXF_MAPING_RXF_2_EC_EN_EC2_SHIFT 4
/* Reset: 0x2         Access: RW */
#define ETH_SHARED_RESOURCE_RXF_MAPING_RXF_2_EC_EN_EC1_MASK 0x00000F00
#define ETH_SHARED_RESOURCE_RXF_MAPING_RXF_2_EC_EN_EC1_SHIFT 8
/* Reset: 0x1         Access: RW */
#define ETH_SHARED_RESOURCE_RXF_MAPING_RXF_2_EC_EN_EC0_MASK 0x0000F000
#define ETH_SHARED_RESOURCE_RXF_MAPING_RXF_2_EC_EN_EC0_SHIFT 12

/**** seq_num register ****/
/* Reset: 0x28        Access: RW */
#define ETH_SHARED_RESOURCE_RXF_MAPING_SEQ_NUM_OFFSET_MASK 0x0000003F
#define ETH_SHARED_RESOURCE_RXF_MAPING_SEQ_NUM_OFFSET_SHIFT 0

/**** rx_udma_fifo register ****/
/*
 * if set we wont send a packet to RX unless we have enough space in the relative udma fifo
 * Reset: 0x0         Access: RW
 */
#define ETH_SHARED_RESOURCE_RXF_MAPING_RX_UDMA_FIFO_MODE_EN (1 << 0)

/**** rrd_ts register ****/
/*
 * If set we will take the TS for LB packet from the destination port and not the source port
 * Reset: 0x0         Access: RW
 */
#define ETH_SHARED_RESOURCE_RXF_MAPING_RRD_TS_LB_TO_DST_PORT (1 << 0)

/**** vf_tcam register ****/
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_REG_VF_TCAM_UNLOAD_MASK 0x000000FF
#define ETH_SHARED_RESOURCE_REG_VF_TCAM_UNLOAD_SHIFT 0
/*
 * Y(1) - write data, x - write NO data (!Y)
 * Reset: 0xff        Access: RW
 */
#define ETH_SHARED_RESOURCE_REG_VF_TCAM_YNX_MASK 0x0000FF00
#define ETH_SHARED_RESOURCE_REG_VF_TCAM_YNX_SHIFT 8
/* Reset: 0xff        Access: RW */
#define ETH_SHARED_RESOURCE_REG_VF_TCAM_FIFO_ENABLE_MASK 0x00FF0000
#define ETH_SHARED_RESOURCE_REG_VF_TCAM_FIFO_ENABLE_SHIFT 16
/* Reset: 0x1         Access: RW */
#define ETH_SHARED_RESOURCE_REG_VF_TCAM_INFO_FIFO_EN (1 << 24)
/* Reset: 0x2         Access: RW */
#define ETH_SHARED_RESOURCE_REG_VF_TCAM_CMD_EN_MASK 0x06000000
#define ETH_SHARED_RESOURCE_REG_VF_TCAM_CMD_EN_SHIFT 25
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_REG_VF_TCAM_ONE_IN (1 << 27)
/*
 * Decide if to take ynx from RFW or from shared resource (this excel)
 * Reset: 0x0         Access: RW
 */
#define ETH_SHARED_RESOURCE_REG_VF_TCAM_TAKE_YNX_FROM_RFW (1 << 28)

/**** vf_tcam_init register ****/
/*
 * need to set with RST for init flow
 * Reset: 0x0         Access: RW
 */
#define ETH_SHARED_RESOURCE_REG_VF_TCAM_INIT_CS_EN_MASK 0x000000FF
#define ETH_SHARED_RESOURCE_REG_VF_TCAM_INIT_CS_EN_SHIFT 0
/*
 * need to set with CS_en for init flow
 * Reset: 0x0         Access: RW
 */
#define ETH_SHARED_RESOURCE_REG_VF_TCAM_INIT_RST_MASK 0x0000FF00
#define ETH_SHARED_RESOURCE_REG_VF_TCAM_INIT_RST_SHIFT 8
/* Reset: 0x3         Access: RW */
#define ETH_SHARED_RESOURCE_REG_VF_TCAM_INIT_RD_VLD_DELAY_MASK 0x000F0000
#define ETH_SHARED_RESOURCE_REG_VF_TCAM_INIT_RD_VLD_DELAY_SHIFT 16

/**** fdir_tcam register ****/
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_REG_FDIR_TCAM_UNLOAD_MASK 0x00000007
#define ETH_SHARED_RESOURCE_REG_FDIR_TCAM_UNLOAD_SHIFT 0
/*
 * Y(1) - write data, x - write NO data (!Y)
 * Reset: 0x7         Access: RW
 */
#define ETH_SHARED_RESOURCE_REG_FDIR_TCAM_YNX_MASK 0x00000038
#define ETH_SHARED_RESOURCE_REG_FDIR_TCAM_YNX_SHIFT 3
/* Reset: 0x1         Access: RW */
#define ETH_SHARED_RESOURCE_REG_FDIR_TCAM_FIFO_ENABLE (1 << 6)
/* Reset: 0x1         Access: RW */
#define ETH_SHARED_RESOURCE_REG_FDIR_TCAM_INFO_FIFO_EN (1 << 7)
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_REG_FDIR_TCAM_ONE_IN (1 << 8)

/**** fdir_tcam_init register ****/
/*
 * need to set with RST for init flow
 * Reset: 0x0         Access: RW
 */
#define ETH_SHARED_RESOURCE_REG_FDIR_TCAM_INIT_CS_EN_MASK 0x00000007
#define ETH_SHARED_RESOURCE_REG_FDIR_TCAM_INIT_CS_EN_SHIFT 0
/*
 * need to set with CS_en for init flow
 * Reset: 0x0         Access: RW
 */
#define ETH_SHARED_RESOURCE_REG_FDIR_TCAM_INIT_RST_MASK 0x00000038
#define ETH_SHARED_RESOURCE_REG_FDIR_TCAM_INIT_RST_SHIFT 3
/* Reset: 0x3         Access: RW */
#define ETH_SHARED_RESOURCE_REG_FDIR_TCAM_INIT_RD_VLD_DELAY_MASK 0x000003C0
#define ETH_SHARED_RESOURCE_REG_FDIR_TCAM_INIT_RD_VLD_DELAY_SHIFT 6

/**** csp_tcam register ****/
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_REG_CSP_TCAM_UNLOAD (1 << 0)
/*
 * Y(1) - write data, x - write NO data (!Y)
 * Reset: 0x1         Access: RW
 */
#define ETH_SHARED_RESOURCE_REG_CSP_TCAM_YNX (1 << 1)
/* Reset: 0x1         Access: RW */
#define ETH_SHARED_RESOURCE_REG_CSP_TCAM_FIFO_ENABLE (1 << 2)
/* Reset: 0x1         Access: RW */
#define ETH_SHARED_RESOURCE_REG_CSP_TCAM_INFO_FIFO_EN (1 << 3)
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_REG_CSP_TCAM_CMD_EN_MASK 0x00000030
#define ETH_SHARED_RESOURCE_REG_CSP_TCAM_CMD_EN_SHIFT 4
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_REG_CSP_TCAM_ONE_IN (1 << 6)

/**** csp_tcam_init register ****/
/*
 * need to set with RST for init flow
 * Reset: 0x0         Access: RW
 */
#define ETH_SHARED_RESOURCE_REG_CSP_TCAM_INIT_CS_EN (1 << 0)
/*
 * need to set with CS_en for init flow
 * Reset: 0x0         Access: RW
 */
#define ETH_SHARED_RESOURCE_REG_CSP_TCAM_INIT_RST (1 << 1)
/* Reset: 0x3         Access: RW */
#define ETH_SHARED_RESOURCE_REG_CSP_TCAM_INIT_RD_VLD_DELAY_MASK 0x0000003C
#define ETH_SHARED_RESOURCE_REG_CSP_TCAM_INIT_RD_VLD_DELAY_SHIFT 2

/**** bist register ****/
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_REG_TCAM_CORE_CTL_BIST_CORE_BIST_PTRN_FILL (1 << 0)
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_REG_TCAM_CORE_CTL_BIST_CORE_BIST_RUN (1 << 1)
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_REG_TCAM_CORE_CTL_BIST_CORE_MEM_RST (1 << 2)
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_REG_TCAM_CORE_CTL_BIST_CORE_BIST_RPR_MODE (1 << 3)

/**** bist_tmg_mode register ****/
/*
 * For the TCAMs, use h0004 as the default value however, all 0s is equivalent because bit 0 is an
 * enable and if it is 0, bit 1 & 2 are ignored for the TCAMs.   I have a strong feeling the TCAM is
 * dependent on the memmaster.
 * Reset: 0x4         Access: RW
 */
#define ETH_SHARED_RESOURCE_REG_TCAM_CORE_CTL_BIST_TMG_MODE_CORE_MEM_HDCAM_MASK 0x0000FFFF
#define ETH_SHARED_RESOURCE_REG_TCAM_CORE_CTL_BIST_TMG_MODE_CORE_MEM_HDCAM_SHIFT 0
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_REG_TCAM_CORE_CTL_BIST_TMG_MODE_HDCAM_MEM_MSTR_TMG_MODE_SEL (1 << 16)

/**** arb_config register ****/
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_ARB_CONFIG_MODE_TDM (1 << 0)
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_ARB_CONFIG_MODE_FIFO_USED (1 << 1)
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_ARB_CONFIG_MODE_SEQN (1 << 2)
/* Reset: 0x0         Access: RW */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_ARB_CONFIG_MODE_SEQN_LB (1 << 3)
/*
 * 0 - count resource available cycles
 * 1 - Count all cycle
 * Reset: 0x0         Access: RW
 */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_ARB_CONFIG_MODE_GRANT (1 << 4)
/*
 * Per DWRR master, enable low priorty arbiter grant when credits are negative
 * Reset: 0xf         Access: RW
 */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_ARB_CONFIG_MODE_NEG_CRED_EN_MASK 0x000001E0
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_ARB_CONFIG_MODE_NEG_CRED_EN_SHIFT 5
/*
 * Interval between between grants, counted according to mode_grant field
 * Reset: 0x4         Access: RW
 */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_ARB_CONFIG_CREDIT_GRANT_INTERVAL_MASK 0x0001FE00
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_ARB_CONFIG_CREDIT_GRANT_INTERVAL_SHIFT 9

/**** cred_level register ****/
/*
 * Minimum number of credit to get arbiter grant
 * Reset: 0x120       Access: RW
 */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_CRED_LEVEL_CREDIT_THRESHOLD_MASK 0x000003FF
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_CRED_LEVEL_CREDIT_THRESHOLD_SHIFT 0
/*
 * Maximum number of accurable credits
 * Reset: 0x130       Access: RW
 */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_CRED_LEVEL_CREDIT_SATURATION_MASK 0x03FF0000
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_CRED_LEVEL_CREDIT_SATURATION_SHIFT 16

/**** cred_grant register ****/
/* Reset: 0x1         Access: RW */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_CRED_GRANT_MASTER0_GRANT_MASK 0x000000FF
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_CRED_GRANT_MASTER0_GRANT_SHIFT 0
/* Reset: 0x1         Access: RW */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_CRED_GRANT_MASTER1_GRANT_MASK 0x0000FF00
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_CRED_GRANT_MASTER1_GRANT_SHIFT 8
/* Reset: 0x1         Access: RW */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_CRED_GRANT_MASTER2_GRANT_MASK 0x00FF0000
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_CRED_GRANT_MASTER2_GRANT_SHIFT 16
/* Reset: 0x1         Access: RW */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_CRED_GRANT_MASTER3_GRANT_MASK 0xFF000000
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_CRED_GRANT_MASTER3_GRANT_SHIFT 24

/**** sop_cost register ****/
/*
 * Master 0 start of packet credit cost
 * Reset: 0x1         Access: RW
 */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_SOP_COST_MASTER0_SOP_C_MASK 0x000000FF
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_SOP_COST_MASTER0_SOP_C_SHIFT 0
/*
 * Master 1 start of packet credit cost
 * Reset: 0x1         Access: RW
 */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_SOP_COST_MASTER1_SOP_C_MASK 0x0000FF00
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_SOP_COST_MASTER1_SOP_C_SHIFT 8
/*
 * Master 2 start of packet credit cost
 * Reset: 0x1         Access: RW
 */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_SOP_COST_MASTER2_SOP_C_MASK 0x00FF0000
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_SOP_COST_MASTER2_SOP_C_SHIFT 16
/*
 * Master 3 start of packet credit cost
 * Reset: 0x1         Access: RW
 */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_SOP_COST_MASTER3_SOP_C_MASK 0xFF000000
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_SOP_COST_MASTER3_SOP_C_SHIFT 24

/**** eop_cost register ****/
/*
 * Master 0 end of packet credit cost
 * Reset: 0x1         Access: RW
 */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_EOP_COST_MASTER0_EOP_C_MASK 0x000000FF
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_EOP_COST_MASTER0_EOP_C_SHIFT 0
/*
 * Master 1 end of packet credit cost
 * Reset: 0x1         Access: RW
 */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_EOP_COST_MASTER1_EOP_C_MASK 0x0000FF00
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_EOP_COST_MASTER1_EOP_C_SHIFT 8
/*
 * Master 2 end of packet credit cost
 * Reset: 0x1         Access: RW
 */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_EOP_COST_MASTER2_EOP_C_MASK 0x00FF0000
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_EOP_COST_MASTER2_EOP_C_SHIFT 16
/*
 * Master 3 end of packet credit cost
 * Reset: 0x1         Access: RW
 */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_EOP_COST_MASTER3_EOP_C_MASK 0xFF000000
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_EOP_COST_MASTER3_EOP_C_SHIFT 24

/**** data_cost register ****/
/*
 * Master 0 regualr data credit cost
 * Reset: 0x1         Access: RW
 */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_DATA_COST_MASTER0_DATA_C_MASK 0x000000FF
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_DATA_COST_MASTER0_DATA_C_SHIFT 0
/*
 * Master 1 regualr data credit cost
 * Reset: 0x1         Access: RW
 */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_DATA_COST_MASTER1_DATA_C_MASK 0x0000FF00
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_DATA_COST_MASTER1_DATA_C_SHIFT 8
/*
 * Master 2 regualr data credit cost
 * Reset: 0x1         Access: RW
 */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_DATA_COST_MASTER2_DATA_C_MASK 0x00FF0000
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_DATA_COST_MASTER2_DATA_C_SHIFT 16
/*
 * Master 3 regualr data credit cost
 * Reset: 0x1         Access: RW
 */
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_DATA_COST_MASTER3_DATA_C_MASK 0xFF000000
#define ETH_SHARED_RESOURCE_AXS_DWRR_ARB_CTRL_DATA_COST_MASTER3_DATA_C_SHIFT 24

#ifdef __cplusplus
}
#endif

#endif

/** @} */
