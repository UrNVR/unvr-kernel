/*
 * Copyright 2018, Amazon.com, Inc. or its affiliates. All Rights Reserved
 */

/**
 *  @{
 * @file   al_hal_eth_common_regs.h
 *
 * @brief eth_common registers
 *
 * This file was auto-generated by RegGen v1.2.1
 *
 */

#ifndef __AL_HAL_ETH_COMMON_REGS_H__
#define __AL_HAL_ETH_COMMON_REGS_H__

#include "al_hal_plat_types.h"

#ifdef __cplusplus
extern "C" {
#endif

/*
 * Unit Registers
 */

/*
 * General Ethernet Shared resources configurations
 */
struct al_eth_common_gen {
	/* [0x0] Shared resource regfile version */
	uint32_t version;
	/* [0x4] apb mux select */
	uint32_t apb_mux;
	/* [0x8] axs mux select (EC to UDMA) */
	uint32_t ec_udma_axs_mux;
	/* [0xc] axi mux select (UDMA to ADPT) */
	uint32_t udma_adpt_axi_mux;
	/* [0x10] ec interrupt to udma */
	uint32_t udma_ec_int;
	/* [0x14] pause mux select (EC to UDMA) */
	uint32_t ec_udma_pause_mux;
	/* [0x18] ROB */
	uint32_t rob;
	/* [0x1c] udma rx FIFO */
	uint32_t udma_rx_fifo;
	/*
	 * [0x20] scratch pad register 1
	 * Reset: 0x0         Access: RW
	 */
	uint32_t scratch_pad_1;
	/*
	 * [0x24] scratch pad register 2
	 * Reset: 0x0         Access: RW
	 */
	uint32_t scratch_pad_2;
	/*
	 * [0x28] scratch pad register 3
	 * Reset: 0x0         Access: RW
	 */
	uint32_t scratch_pad_3;
	/*
	 * [0x2c] scratch pad register 4
	 * Reset: 0x0         Access: RW
	 */
	uint32_t scratch_pad_4;
	/*
	 * [0x30] scratch pad register 5
	 * Reset: 0x0         Access: RW
	 */
	uint32_t scratch_pad_5;
	/* [0x34] */
	uint32_t rsrvd_0[3];
};

/*
 * Ethernet Shared resource regfile spare bits
 */
struct al_eth_common_spare {
	/*
	 * [0x0] spare bits reset value 0
	 * Reset: 0x0         Access: RW
	 */
	uint32_t zero;
	/*
	 * [0x4] spare bits reset value 1
	 * Reset: 0xffffffff  Access: RW
	 */
	uint32_t one;
};

/*
 * adpt_udma_mux adapter to UDMA
 */
struct al_eth_common_adp2func {
	/* [0x0] msix func mask vector */
	uint32_t msix_func_mask_vec;
	/* [0x4] msix func mask vector bar */
	uint32_t msix_func_mask_vec_bar;
	/* [0x8] msix enable vector */
	uint32_t msix_enable_vec;
	/* [0xc] msix enable vector bar */
	uint32_t msix_enable_vec_bar;
	/* [0x10] FLR */
	uint32_t flr;
	/* [0x14] FLR bar */
	uint32_t flr_bar;
	/* [0x18] conf */
	uint32_t conf;
	/* [0x1c] conf bar */
	uint32_t conf_bar;
	/* [0x20] interrupt disable vector */
	uint32_t int_disable_vec;
	/* [0x24] interrupt disable vector bar */
	uint32_t int_disable_vec_bar;
	/* [0x28] aps control */
	uint32_t aps_control;
	/* [0x2c] aps control bar */
	uint32_t aps_control_bar;
	/* [0x30] */
	uint32_t rsrvd_0[28];
};

/*
 * adpt_udma_mux UDMA to adapter
 */
struct al_eth_common_func2adp {
	/* [0x0] bar 3 - interrupt vector one-hot */
	uint32_t int_vec_oh_bar3;
	/* [0x4] bar 2 - interrupt vector one-hot */
	uint32_t int_vec_oh_bar2;
	/* [0x8] bar 1 - interrupt vector one-hot */
	uint32_t int_vec_oh_bar1;
	/* [0xc] bar 0 - interrupt vector one-hot */
	uint32_t int_vec_oh_bar0;
	/* [0x10] */
	uint32_t rsrvd_0[12];
};

/*
 * adpt_udma_mux adapter to EC
 */
struct al_eth_common_adp2unit {
	/* [0x0] clock disable */
	uint32_t clock_disable;
	/* [0x4] Shared resource/cache */
	uint32_t shared;
	/* [0x8] */
	uint32_t rsrvd_0[14];
};

/*
 * adapter configuration
 */
struct al_eth_common_adpt_cfg {
	/* [0x0] */
	uint32_t pcie_vendor;
	/* [0x4] */
	uint32_t pcie_base_class;
	/* [0x8] */
	uint32_t pcie_sub_class;
	/* [0xc] */
	uint32_t pcie_class;
	/* [0x10] */
	uint32_t pcie_rev;
	/* [0x14] */
	uint32_t nof_vf;
	/* [0x18] */
	uint32_t conf_dev;
	/* [0x1c] */
	uint32_t bme;
	/* [0x20] */
	uint32_t flr_cfg;
	/* [0x24] Adapt abort mask reg 1 */
	uint32_t abort_mask_1;
	/* [0x28] Adapt abort mask reg 2 */
	uint32_t abort_mask_2;
	/* [0x2c] Adapt abort mask reg 3 */
	uint32_t abort_mask_3;
	/* [0x30] EC abort mask reg 1 */
	uint32_t ec_abort_mask_1;
	/* [0x34] EC abort mask reg 2 */
	uint32_t ec_abort_mask_2;
	/* [0x38] EC abort mask reg 3 */
	uint32_t ec_abort_mask_3;
	/* [0x3c] */
	uint32_t rsrvd_0;
};

/*
 * configure udma RX fifos
 */
struct al_eth_common_udma_rx_fifos {
	/* [0x0] */
	uint32_t insue_ec2udma_0_1;
	/* [0x4] */
	uint32_t insue_ec2udma_2_3;
	/* [0x8] */
	uint32_t qdepth_limit_0_1;
	/* [0xc] */
	uint32_t qdepth_limit_2_3;
	/*
	 * [0x10]
	 * Reset: 0x2800      Access: RW
	 */
	uint32_t max3;
	/*
	 * [0x14]
	 * Reset: 0x2800      Access: RW
	 */
	uint32_t max2;
	/*
	 * [0x18]
	 * Reset: 0x2800      Access: RW
	 */
	uint32_t max1;
	/*
	 * [0x1c]
	 * Reset: 0x2800      Access: RW
	 */
	uint32_t max0;
	/*
	 * [0x20]
	 * Reset: 0x64        Access: RW
	 */
	uint32_t rx_data_path3;
	/*
	 * [0x24]
	 * Reset: 0x64        Access: RW
	 */
	uint32_t rx_data_path2;
	/*
	 * [0x28]
	 * Reset: 0x64        Access: RW
	 */
	uint32_t rx_data_path1;
	/*
	 * [0x2c]
	 * Reset: 0x64        Access: RW
	 */
	uint32_t rx_data_path0;
	/* [0x30] */
	uint32_t afull;
	/* [0x34] */
	uint32_t pkt_boundary_cmd;
	/* [0x38] */
	uint32_t rsrvd_0[2];
};

struct al_eth_common_regs {
	/* [0x0] 4 groups of interrupts */
	uint32_t int_ctrl_mem[64];
	/* [0x100] General Ethernet Shared resources configurations */
	struct al_eth_common_gen gen;
	/* [0x140] Ethernet Shared resource regfile spare bits */
	struct al_eth_common_spare spare[4];
	/* [0x160] adpt_udma_mux adapter to UDMA */
	struct al_eth_common_adp2func adp2func;
	/* [0x200] adpt_udma_mux UDMA to adapter */
	struct al_eth_common_func2adp func2adp;
	/* [0x240] adpt_udma_mux adapter to EC */
	struct al_eth_common_adp2unit adp2unit;
	/* [0x280] adapter configuration */
	struct al_eth_common_adpt_cfg adpt_cfg[4];
	/* [0x380] */
	uint32_t rsrvd_0[160];
	/* [0x600] configure udma RX fifos */
	struct al_eth_common_udma_rx_fifos udma_rx_fifos;
	/* [0x640] */
	uint32_t rsrvd_1[624];
	/* [0x1000] Ethernet Cache regfile */
	uint32_t eth_cache[512];
	/* [0x1800] MAC/PCS shared resource regfile */
	uint32_t mac_shared_resource[256];
	/* [0x1c00] */
	uint32_t rsrvd_2[256];
	/* [0x2000] Ethernet Shared resource (MAC i/f, RXF, RFW Shared) */
	uint32_t eth_sr[2048];
	/* [0x4000] Ethernet Shared resource (MAC i/f, RXF, RFW Shared) */
	uint32_t eth_cache_pmu[4096];
	/* [0x8000] Ethernet Shared resource (MAC i/f, RXF, RFW Shared) */
	uint32_t eth_sr_pmu[4096];
	/* [0xc000] */
	uint32_t rsrvd_3[4096];
};


/*
 * Registers Fields
 */

/**** version register ****/
/*
 * Revision number (Minor)
 * Reset: 0x1         Access: RO
 */
#define ETH_COMMON_GEN_VERSION_RELEASE_NUM_MINOR_MASK 0x000000FF
#define ETH_COMMON_GEN_VERSION_RELEASE_NUM_MINOR_SHIFT 0
/*
 * Revision number (Major)
 * Reset: 0x0         Access: RO
 */
#define ETH_COMMON_GEN_VERSION_RELEASE_NUM_MAJOR_MASK 0x0000FF00
#define ETH_COMMON_GEN_VERSION_RELEASE_NUM_MAJOR_SHIFT 8
/*
 * Date of release
 * Reset: 0x0         Access: RO
 */
#define ETH_COMMON_GEN_VERSION_DATE_DAY_MASK 0x001F0000
#define ETH_COMMON_GEN_VERSION_DATE_DAY_SHIFT 16
/*
 * Month of release
 * Reset: 0x0         Access: RO
 */
#define ETH_COMMON_GEN_VERSION_DATA_MONTH_MASK 0x01E00000
#define ETH_COMMON_GEN_VERSION_DATA_MONTH_SHIFT 21
/*
 * Year of release (starting from 2000)
 * Reset: 0x0         Access: RO
 */
#define ETH_COMMON_GEN_VERSION_DATE_YEAR_MASK 0x3E000000
#define ETH_COMMON_GEN_VERSION_DATE_YEAR_SHIFT 25
/*
 * Reserved
 * Reset: 0x0         Access: RO
 */
#define ETH_COMMON_GEN_VERSION_RESERVED_MASK 0xC0000000
#define ETH_COMMON_GEN_VERSION_RESERVED_SHIFT 30

/**** apb_mux register ****/
/*
 * UDMA 0 - 2bits per adapter to select bar
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_APB_MUX_SEL_0_MASK 0x000000FF
#define ETH_COMMON_GEN_APB_MUX_SEL_0_SHIFT 0
/*
 * UDMA 1 - 2bits per adapter to select bar
 * Reset: 0x1         Access: RW
 */
#define ETH_COMMON_GEN_APB_MUX_SEL_1_MASK 0x0000FF00
#define ETH_COMMON_GEN_APB_MUX_SEL_1_SHIFT 8
/*
 * UDMA 2 - 2bits per adapter to select bar
 * Reset: 0x2         Access: RW
 */
#define ETH_COMMON_GEN_APB_MUX_SEL_2_MASK 0x00FF0000
#define ETH_COMMON_GEN_APB_MUX_SEL_2_SHIFT 16
/*
 * UDMA 3 - 2bits per adapter to select bar
 * Reset: 0x3         Access: RW
 */
#define ETH_COMMON_GEN_APB_MUX_SEL_3_MASK 0xFF000000
#define ETH_COMMON_GEN_APB_MUX_SEL_3_SHIFT 24

/**** ec_udma_axs_mux register ****/
/*
 * UDMA 0 - 2 bits to select EC number - Rx path
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_RX_SEL_0_MASK 0x00000003
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_RX_SEL_0_SHIFT 0
/*
 * UDMA 1 - 2 bits to select EC number - Rx path
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_RX_SEL_1_MASK 0x0000000C
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_RX_SEL_1_SHIFT 2
/*
 * UDMA 2 - 2 bits to select EC number - Rx path
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_RX_SEL_2_MASK 0x00000030
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_RX_SEL_2_SHIFT 4
/*
 * UDMA 3 - 2 bits to select EC number - Rx path
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_RX_SEL_3_MASK 0x000000C0
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_RX_SEL_3_SHIFT 6
/*
 * UDMA 0 - 2 bits to select EC number - Tx path
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_TX_SEL_0_MASK 0x00000300
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_TX_SEL_0_SHIFT 8
/*
 * UDMA 1 - 2 bits to select EC number - Tx path
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_TX_SEL_1_MASK 0x00000C00
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_TX_SEL_1_SHIFT 10
/*
 * UDMA 2 - 2 bits to select EC number - Tx path
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_TX_SEL_2_MASK 0x00003000
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_TX_SEL_2_SHIFT 12
/*
 * UDMA 3 - 2 bits to select EC number - Tx path
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_TX_SEL_3_MASK 0x0000C000
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_TX_SEL_3_SHIFT 14
/*
 * EC 0 - udma enable  - Tx path
 * Reset: 0xf         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_EC_0_UDMA_ENABLE_MASK 0x000F0000
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_EC_0_UDMA_ENABLE_SHIFT 16
/*
 * EC 1 - udma enable  - Tx path
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_EC_1_UDMA_ENABLE_MASK 0x00F00000
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_EC_1_UDMA_ENABLE_SHIFT 20
/*
 * EC 2 - udma enable  - Tx path
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_EC_2_UDMA_ENABLE_MASK 0x0F000000
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_EC_2_UDMA_ENABLE_SHIFT 24
/*
 * EC 3 - udma enable  - Tx path
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_EC_3_UDMA_ENABLE_MASK 0xF0000000
#define ETH_COMMON_GEN_EC_UDMA_AXS_MUX_EC_3_UDMA_ENABLE_SHIFT 28

/**** udma_adpt_axi_mux register ****/
/*
 * UDMA 0 - 2 bits to select ADPT number
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_UDMA_ADPT_AXI_MUX_SEL_0_MASK 0x00000003
#define ETH_COMMON_GEN_UDMA_ADPT_AXI_MUX_SEL_0_SHIFT 0
/*
 * UDMA 1 - 2 bits to select ADPT number
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_UDMA_ADPT_AXI_MUX_SEL_1_MASK 0x0000000C
#define ETH_COMMON_GEN_UDMA_ADPT_AXI_MUX_SEL_1_SHIFT 2
/*
 * UDMA 2 - 2 bits to select ADPT number
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_UDMA_ADPT_AXI_MUX_SEL_2_MASK 0x00000030
#define ETH_COMMON_GEN_UDMA_ADPT_AXI_MUX_SEL_2_SHIFT 4
/*
 * UDMA 3 - 2 bits to select ADPT number
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_UDMA_ADPT_AXI_MUX_SEL_3_MASK 0x000000C0
#define ETH_COMMON_GEN_UDMA_ADPT_AXI_MUX_SEL_3_SHIFT 6

/**** udma_ec_int register ****/
/*
 * UDMA 0 - select ec
 * Reset: 0x1         Access: RW
 */
#define ETH_COMMON_GEN_UDMA_EC_INT_MASK_0_MASK 0x0000000F
#define ETH_COMMON_GEN_UDMA_EC_INT_MASK_0_SHIFT 0
/*
 * UDMA 1 - select ec
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_UDMA_EC_INT_MASK_1_MASK 0x000000F0
#define ETH_COMMON_GEN_UDMA_EC_INT_MASK_1_SHIFT 4
/*
 * UDMA 2 - select ec
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_UDMA_EC_INT_MASK_2_MASK 0x00000F00
#define ETH_COMMON_GEN_UDMA_EC_INT_MASK_2_SHIFT 8
/*
 * UDMA 3 - select ec
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_UDMA_EC_INT_MASK_3_MASK 0x0000F000
#define ETH_COMMON_GEN_UDMA_EC_INT_MASK_3_SHIFT 12

/**** ec_udma_pause_mux register ****/
/*
 * UDMA 0 - 2 bits to select EC number for stream pause
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_0_EC_STREAM_MASK 0x00000003
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_0_EC_STREAM_SHIFT 0
/*
 * UDMA 1 - 2 bits to select EC number for stream pause
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_1_EC_STREAM_MASK 0x0000000C
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_1_EC_STREAM_SHIFT 2
/*
 * UDMA 2 - 2 bits to select EC number for stream pause
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_2_EC_STREAM_MASK 0x00000030
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_2_EC_STREAM_SHIFT 4
/*
 * UDMA 3 - 2 bits to select  EC number for stream pause
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_3_EC_STREAM_MASK 0x000000C0
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_3_EC_STREAM_SHIFT 6
/*
 * UDMA 0 - 2 bits to select EC UDMA number for stream pause
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_0_UDMA_STREAM_MASK 0x00000300
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_0_UDMA_STREAM_SHIFT 8
/*
 * UDMA 1 - 2 bits to select  EC UDMA number for stream pause
 * Reset: 0x1         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_1_UDMA_STREAM_MASK 0x00000C00
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_1_UDMA_STREAM_SHIFT 10
/*
 * UDMA 2 - 2 bits to select  EC UDMA number for stream pause
 * Reset: 0x2         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_2_UDMA_STREAM_MASK 0x00003000
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_2_UDMA_STREAM_SHIFT 12
/*
 * UDMA 3 - 2 bits to select  EC UDMA number for stream pause
 * Reset: 0x3         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_3_UDMA_STREAM_MASK 0x0000C000
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_3_UDMA_STREAM_SHIFT 14
/*
 * UDMA 0 - 2 bits to select EC number for queue pause
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_0_EC_QUEUE_MASK 0x00030000
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_0_EC_QUEUE_SHIFT 16
/*
 * UDMA 1 - 2 bits to select  EC number for queue pause
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_1_EC_QUEUE_MASK 0x000C0000
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_1_EC_QUEUE_SHIFT 18
/*
 * UDMA 2 - 2 bits to select  EC number for queue pause
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_2_EC_QUEUE_MASK 0x00300000
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_2_EC_QUEUE_SHIFT 20
/*
 * UDMA 3 - 2 bits to select  EC number for queue pause
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_3_EC_QUEUE_MASK 0x00C00000
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_3_EC_QUEUE_SHIFT 22
/*
 * UDMA 0 - 2 bits to select EC UDMA number for queue pause
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_0_UDMA_QUEUE_MASK 0x03000000
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_0_UDMA_QUEUE_SHIFT 24
/*
 * UDMA 1 - 2 bits to select  EC UDMA number for queue pause
 * Reset: 0x1         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_1_UDMA_QUEUE_MASK 0x0C000000
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_1_UDMA_QUEUE_SHIFT 26
/*
 * UDMA 2 - 2 bits to select  EC UDMA number for queue pause
 * Reset: 0x2         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_2_UDMA_QUEUE_MASK 0x30000000
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_2_UDMA_QUEUE_SHIFT 28
/*
 * UDMA 3 - 2 bits to select  EC UDMA number for queue pause
 * Reset: 0x3         Access: RW
 */
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_3_UDMA_QUEUE_MASK 0xC0000000
#define ETH_COMMON_GEN_EC_UDMA_PAUSE_MUX_SEL_3_UDMA_QUEUE_SHIFT 30

/**** rob register ****/
/*
 * Per rob enable FLR to rob when FLR to PF occurs
 * [0] udma 0 / rob 0
 * [1] udma 1 / rob 1
 * [2] udma 2 / rob 2
 * [3] udma 3 / rob 3
 * Reset: 0xf         Access: RW
 */
#define ETH_COMMON_GEN_ROB_PF_FLR_ROB_EN_MASK 0x0000000F
#define ETH_COMMON_GEN_ROB_PF_FLR_ROB_EN_SHIFT 0
/*
 * Per rob enable FLR to wob when FLR to PF occurs
 * [0] udma 0 / wob 0
 * [1] udma 1 / wob 1
 * [2] udma 2 / wob 2
 * [3] udma 3 / wob 3
 * Reset: 0xf         Access: RW
 */
#define ETH_COMMON_GEN_ROB_PF_FLR_WOB_EN_MASK 0x000000F0
#define ETH_COMMON_GEN_ROB_PF_FLR_WOB_EN_SHIFT 4
/*
 * mask for adpt_udma rob memories parity error
 * Reset: 0xf         Access: RW
 */
#define ETH_COMMON_GEN_ROB_PAR_ERR_MASK_MASK 0x00000F00
#define ETH_COMMON_GEN_ROB_PAR_ERR_MASK_SHIFT 8
/*
 * adpt_udma rx_fifo and rob mem ctrl SD
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_GEN_ROB_MEM_SD        (1 << 31)

/**** udma_rx_fifo register ****/
/*
 * mask for adpt_udma rx_fifo memories parity error
 * Reset: 0xffff      Access: RW
 */
#define ETH_COMMON_GEN_UDMA_RX_FIFO_PAR_ERR_MASK_MASK 0x0000FFFF
#define ETH_COMMON_GEN_UDMA_RX_FIFO_PAR_ERR_MASK_SHIFT 0
/*
 * memory init trigger
 * Reset: 0x1         Access: RW
 */
#define ETH_COMMON_GEN_UDMA_RX_FIFO_MEM_INIT_TRIG (1 << 16)

/**** msix_func_mask_vec register ****/
/*
 * UDMA 0 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_MSIX_FUNC_MASK_VEC_SEL_0_MASK 0x00000003
#define ETH_COMMON_ADP2FUNC_MSIX_FUNC_MASK_VEC_SEL_0_SHIFT 0
/*
 * UDMA 1 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_MSIX_FUNC_MASK_VEC_SEL_1_MASK 0x00000030
#define ETH_COMMON_ADP2FUNC_MSIX_FUNC_MASK_VEC_SEL_1_SHIFT 4
/*
 * UDMA 2 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_MSIX_FUNC_MASK_VEC_SEL_2_MASK 0x00000300
#define ETH_COMMON_ADP2FUNC_MSIX_FUNC_MASK_VEC_SEL_2_SHIFT 8
/*
 * UDMA 3 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_MSIX_FUNC_MASK_VEC_SEL_3_MASK 0x00003000
#define ETH_COMMON_ADP2FUNC_MSIX_FUNC_MASK_VEC_SEL_3_SHIFT 12

/**** msix_func_mask_vec_bar register ****/
/*
 * UDMA 0 - select adapter bar
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_MSIX_FUNC_MASK_VEC_BAR_SEL_0_MASK 0x00000003
#define ETH_COMMON_ADP2FUNC_MSIX_FUNC_MASK_VEC_BAR_SEL_0_SHIFT 0
/*
 * UDMA 1 - select adapter bar
 * Reset: 0x1         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_MSIX_FUNC_MASK_VEC_BAR_SEL_1_MASK 0x00000030
#define ETH_COMMON_ADP2FUNC_MSIX_FUNC_MASK_VEC_BAR_SEL_1_SHIFT 4
/*
 * UDMA 2 - select adapter bar
 * Reset: 0x2         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_MSIX_FUNC_MASK_VEC_BAR_SEL_2_MASK 0x00000300
#define ETH_COMMON_ADP2FUNC_MSIX_FUNC_MASK_VEC_BAR_SEL_2_SHIFT 8
/*
 * UDMA 3 - select adapter bar
 * Reset: 0x3         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_MSIX_FUNC_MASK_VEC_BAR_SEL_3_MASK 0x00003000
#define ETH_COMMON_ADP2FUNC_MSIX_FUNC_MASK_VEC_BAR_SEL_3_SHIFT 12

/**** msix_enable_vec register ****/
/*
 * UDMA 0 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_MSIX_ENABLE_VEC_SEL_0_MASK 0x00000003
#define ETH_COMMON_ADP2FUNC_MSIX_ENABLE_VEC_SEL_0_SHIFT 0
/*
 * UDMA 1 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_MSIX_ENABLE_VEC_SEL_1_MASK 0x00000030
#define ETH_COMMON_ADP2FUNC_MSIX_ENABLE_VEC_SEL_1_SHIFT 4
/*
 * UDMA 2 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_MSIX_ENABLE_VEC_SEL_2_MASK 0x00000300
#define ETH_COMMON_ADP2FUNC_MSIX_ENABLE_VEC_SEL_2_SHIFT 8
/*
 * UDMA 3 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_MSIX_ENABLE_VEC_SEL_3_MASK 0x00003000
#define ETH_COMMON_ADP2FUNC_MSIX_ENABLE_VEC_SEL_3_SHIFT 12

/**** msix_enable_vec_bar register ****/
/*
 * UDMA 0 - select adapter bar
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_MSIX_ENABLE_VEC_BAR_SEL_0_MASK 0x00000003
#define ETH_COMMON_ADP2FUNC_MSIX_ENABLE_VEC_BAR_SEL_0_SHIFT 0
/*
 * UDMA 1 - select adapter bar
 * Reset: 0x1         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_MSIX_ENABLE_VEC_BAR_SEL_1_MASK 0x00000030
#define ETH_COMMON_ADP2FUNC_MSIX_ENABLE_VEC_BAR_SEL_1_SHIFT 4
/*
 * UDMA 2 - select adapter bar
 * Reset: 0x2         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_MSIX_ENABLE_VEC_BAR_SEL_2_MASK 0x00000300
#define ETH_COMMON_ADP2FUNC_MSIX_ENABLE_VEC_BAR_SEL_2_SHIFT 8
/*
 * UDMA 3 - select adapter bar
 * Reset: 0x3         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_MSIX_ENABLE_VEC_BAR_SEL_3_MASK 0x00003000
#define ETH_COMMON_ADP2FUNC_MSIX_ENABLE_VEC_BAR_SEL_3_SHIFT 12

/**** flr register ****/
/*
 * UDMA 0 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_FLR_SEL_0_MASK 0x00000003
#define ETH_COMMON_ADP2FUNC_FLR_SEL_0_SHIFT 0
/*
 * UDMA 1 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_FLR_SEL_1_MASK 0x00000030
#define ETH_COMMON_ADP2FUNC_FLR_SEL_1_SHIFT 4
/*
 * UDMA 2 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_FLR_SEL_2_MASK 0x00000300
#define ETH_COMMON_ADP2FUNC_FLR_SEL_2_SHIFT 8
/*
 * UDMA 3 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_FLR_SEL_3_MASK 0x00003000
#define ETH_COMMON_ADP2FUNC_FLR_SEL_3_SHIFT 12

/**** flr_bar register ****/
/*
 * UDMA 0 - select adapter bar
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_FLR_BAR_SEL_0_MASK 0x00000003
#define ETH_COMMON_ADP2FUNC_FLR_BAR_SEL_0_SHIFT 0
/*
 * UDMA 1 - select adapter bar
 * Reset: 0x1         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_FLR_BAR_SEL_1_MASK 0x00000030
#define ETH_COMMON_ADP2FUNC_FLR_BAR_SEL_1_SHIFT 4
/*
 * UDMA 2 - select adapter bar
 * Reset: 0x2         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_FLR_BAR_SEL_2_MASK 0x00000300
#define ETH_COMMON_ADP2FUNC_FLR_BAR_SEL_2_SHIFT 8
/*
 * UDMA 3 - select adapter bar
 * Reset: 0x3         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_FLR_BAR_SEL_3_MASK 0x00003000
#define ETH_COMMON_ADP2FUNC_FLR_BAR_SEL_3_SHIFT 12

/**** conf register ****/
/*
 * UDMA 0 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_CONF_SEL_0_MASK 0x00000003
#define ETH_COMMON_ADP2FUNC_CONF_SEL_0_SHIFT 0
/*
 * UDMA 1 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_CONF_SEL_1_MASK 0x00000030
#define ETH_COMMON_ADP2FUNC_CONF_SEL_1_SHIFT 4
/*
 * UDMA 2 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_CONF_SEL_2_MASK 0x00000300
#define ETH_COMMON_ADP2FUNC_CONF_SEL_2_SHIFT 8
/*
 * UDMA 3 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_CONF_SEL_3_MASK 0x00003000
#define ETH_COMMON_ADP2FUNC_CONF_SEL_3_SHIFT 12

/**** conf_bar register ****/
/*
 * UDMA 0 - select adapter bar
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_CONF_BAR_SEL_0_MASK 0x00000003
#define ETH_COMMON_ADP2FUNC_CONF_BAR_SEL_0_SHIFT 0
/*
 * UDMA 1 - select adapter bar
 * Reset: 0x1         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_CONF_BAR_SEL_1_MASK 0x00000030
#define ETH_COMMON_ADP2FUNC_CONF_BAR_SEL_1_SHIFT 4
/*
 * UDMA 2 - select adapter bar
 * Reset: 0x2         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_CONF_BAR_SEL_2_MASK 0x00000300
#define ETH_COMMON_ADP2FUNC_CONF_BAR_SEL_2_SHIFT 8
/*
 * UDMA 3 - select adapter bar
 * Reset: 0x3         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_CONF_BAR_SEL_3_MASK 0x00003000
#define ETH_COMMON_ADP2FUNC_CONF_BAR_SEL_3_SHIFT 12

/**** int_disable_vec register ****/
/*
 * UDMA 0 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_INT_DISABLE_VEC_SEL_0_MASK 0x00000003
#define ETH_COMMON_ADP2FUNC_INT_DISABLE_VEC_SEL_0_SHIFT 0
/*
 * UDMA 1 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_INT_DISABLE_VEC_SEL_1_MASK 0x00000030
#define ETH_COMMON_ADP2FUNC_INT_DISABLE_VEC_SEL_1_SHIFT 4
/*
 * UDMA 2 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_INT_DISABLE_VEC_SEL_2_MASK 0x00000300
#define ETH_COMMON_ADP2FUNC_INT_DISABLE_VEC_SEL_2_SHIFT 8
/*
 * UDMA 3 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_INT_DISABLE_VEC_SEL_3_MASK 0x00003000
#define ETH_COMMON_ADP2FUNC_INT_DISABLE_VEC_SEL_3_SHIFT 12

/**** int_disable_vec_bar register ****/
/*
 * UDMA 0 - select adapter bar
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_INT_DISABLE_VEC_BAR_SEL_0_MASK 0x00000003
#define ETH_COMMON_ADP2FUNC_INT_DISABLE_VEC_BAR_SEL_0_SHIFT 0
/*
 * UDMA 1 - select adapter bar
 * Reset: 0x1         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_INT_DISABLE_VEC_BAR_SEL_1_MASK 0x00000030
#define ETH_COMMON_ADP2FUNC_INT_DISABLE_VEC_BAR_SEL_1_SHIFT 4
/*
 * UDMA 2 - select adapter bar
 * Reset: 0x2         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_INT_DISABLE_VEC_BAR_SEL_2_MASK 0x00000300
#define ETH_COMMON_ADP2FUNC_INT_DISABLE_VEC_BAR_SEL_2_SHIFT 8
/*
 * UDMA 3 - select adapter bar
 * Reset: 0x3         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_INT_DISABLE_VEC_BAR_SEL_3_MASK 0x00003000
#define ETH_COMMON_ADP2FUNC_INT_DISABLE_VEC_BAR_SEL_3_SHIFT 12

/**** aps_control register ****/
/*
 * UDMA 0 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_APS_CONTROL_SEL_0_MASK 0x00000003
#define ETH_COMMON_ADP2FUNC_APS_CONTROL_SEL_0_SHIFT 0
/*
 * UDMA 1 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_APS_CONTROL_SEL_1_MASK 0x00000030
#define ETH_COMMON_ADP2FUNC_APS_CONTROL_SEL_1_SHIFT 4
/*
 * UDMA 2 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_APS_CONTROL_SEL_2_MASK 0x00000300
#define ETH_COMMON_ADP2FUNC_APS_CONTROL_SEL_2_SHIFT 8
/*
 * UDMA 3 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_APS_CONTROL_SEL_3_MASK 0x00003000
#define ETH_COMMON_ADP2FUNC_APS_CONTROL_SEL_3_SHIFT 12

/**** aps_control_bar register ****/
/*
 * UDMA 0 - select adapter bar
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_APS_CONTROL_BAR_SEL_0_MASK 0x00000003
#define ETH_COMMON_ADP2FUNC_APS_CONTROL_BAR_SEL_0_SHIFT 0
/*
 * UDMA 1 - select adapter bar
 * Reset: 0x1         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_APS_CONTROL_BAR_SEL_1_MASK 0x00000030
#define ETH_COMMON_ADP2FUNC_APS_CONTROL_BAR_SEL_1_SHIFT 4
/*
 * UDMA 2 - select adapter bar
 * Reset: 0x2         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_APS_CONTROL_BAR_SEL_2_MASK 0x00000300
#define ETH_COMMON_ADP2FUNC_APS_CONTROL_BAR_SEL_2_SHIFT 8
/*
 * UDMA 3 - select adapter bar
 * Reset: 0x3         Access: RW
 */
#define ETH_COMMON_ADP2FUNC_APS_CONTROL_BAR_SEL_3_MASK 0x00003000
#define ETH_COMMON_ADP2FUNC_APS_CONTROL_BAR_SEL_3_SHIFT 12

/**** int_vec_oh_bar3 register ****/
/*
 * Select UDMA -  One-hot selector for adapter 0 bar 3
 * Reset: 0x8         Access: RW
 */
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR3_SEL_0_MASK 0x0000000F
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR3_SEL_0_SHIFT 0
/*
 * Select UDMA -  One-hot selector for adapter 1 bar 3
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR3_SEL_1_MASK 0x000000F0
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR3_SEL_1_SHIFT 4
/*
 * Select UDMA -  One-hot selector for adapter 2 bar 3
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR3_SEL_2_MASK 0x00000F00
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR3_SEL_2_SHIFT 8
/*
 * Select UDMA -  One-hot selector for adapter 3 bar 3
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR3_SEL_3_MASK 0x0000F000
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR3_SEL_3_SHIFT 12

/**** int_vec_oh_bar2 register ****/
/*
 * Select UDMA -  One-hot selector for adapter 0 bar 2
 * Reset: 0x4         Access: RW
 */
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR2_SEL_0_MASK 0x0000000F
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR2_SEL_0_SHIFT 0
/*
 * Select UDMA -  One-hot selector for adapter 1 bar 2
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR2_SEL_1_MASK 0x000000F0
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR2_SEL_1_SHIFT 4
/*
 * Select UDMA -  One-hot selector for adapter 2 bar 2
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR2_SEL_2_MASK 0x00000F00
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR2_SEL_2_SHIFT 8
/*
 * Select UDMA -  One-hot selector for adapter 3 bar 2
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR2_SEL_3_MASK 0x0000F000
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR2_SEL_3_SHIFT 12

/**** int_vec_oh_bar1 register ****/
/*
 * Select UDMA -  One-hot selector for adapter 0 bar 1
 * Reset: 0x2         Access: RW
 */
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR1_SEL_0_MASK 0x0000000F
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR1_SEL_0_SHIFT 0
/*
 * Select UDMA -  One-hot selector for adapter 1 bar 1
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR1_SEL_1_MASK 0x000000F0
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR1_SEL_1_SHIFT 4
/*
 * Select UDMA -  One-hot selector for adapter 2 bar 1
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR1_SEL_2_MASK 0x00000F00
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR1_SEL_2_SHIFT 8
/*
 * Select UDMA -  One-hot selector for adapter 3 bar 1
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR1_SEL_3_MASK 0x0000F000
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR1_SEL_3_SHIFT 12

/**** int_vec_oh_bar0 register ****/
/*
 * Select UDMA -  One-hot selector for adapter 0 bar 0
 * Reset: 0x1         Access: RW
 */
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR0_SEL_0_MASK 0x0000000F
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR0_SEL_0_SHIFT 0
/*
 * Select UDMA -  One-hot selector for adapter 1 bar 0
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR0_SEL_1_MASK 0x000000F0
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR0_SEL_1_SHIFT 4
/*
 * Select UDMA -  One-hot selector for adapter 2 bar 0
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR0_SEL_2_MASK 0x00000F00
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR0_SEL_2_SHIFT 8
/*
 * Select UDMA -  One-hot selector for adapter 3 bar 0
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR0_SEL_3_MASK 0x0000F000
#define ETH_COMMON_FUNC2ADP_INT_VEC_OH_BAR0_SEL_3_SHIFT 12

/**** clock_disable register ****/
/*
 * UDMA/EC 0 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2UNIT_CLOCK_DISABLE_SEL_0_MASK 0x00000003
#define ETH_COMMON_ADP2UNIT_CLOCK_DISABLE_SEL_0_SHIFT 0
/*
 * UDMA/EC 1 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2UNIT_CLOCK_DISABLE_SEL_1_MASK 0x00000030
#define ETH_COMMON_ADP2UNIT_CLOCK_DISABLE_SEL_1_SHIFT 4
/*
 * UDMA/EC 2 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2UNIT_CLOCK_DISABLE_SEL_2_MASK 0x00000300
#define ETH_COMMON_ADP2UNIT_CLOCK_DISABLE_SEL_2_SHIFT 8
/*
 * UDMA/EC 3 - select adapter
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2UNIT_CLOCK_DISABLE_SEL_3_MASK 0x00003000
#define ETH_COMMON_ADP2UNIT_CLOCK_DISABLE_SEL_3_SHIFT 12
/*
 * UDMA / EC 0
 * Clock disable register
 * Only  valid when source_sel_0=1
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2UNIT_CLOCK_DISABLE_REG_0 (1 << 16)
/*
 * UDMA / EC 1
 * Clock disable register
 * Only  valid when source_sel_1=1
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2UNIT_CLOCK_DISABLE_REG_1 (1 << 17)
/*
 * UDMA / EC 2
 * Clock disable register
 * Only  valid when source_sel_2=1
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2UNIT_CLOCK_DISABLE_REG_2 (1 << 18)
/*
 * UDMA / EC 3
 * Clock disable register
 * Only  valid when source_sel_3=1
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2UNIT_CLOCK_DISABLE_REG_3 (1 << 19)
/*
 * UDMA / EC 0
 * 0 - clock disable from adapter
 * 1 - clock disable from register
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2UNIT_CLOCK_DISABLE_SOURCE_SEL_0 (1 << 24)
/*
 * UDMA / EC1
 * 0 - clock disable from adapter
 * 1 - clock disable from register
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2UNIT_CLOCK_DISABLE_SOURCE_SEL_1 (1 << 25)
/*
 * UDMA / EC 2
 * 0 - clock disable from adapter
 * 1 - clock disable from register
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2UNIT_CLOCK_DISABLE_SOURCE_SEL_2 (1 << 26)
/*
 * UDMA / EC 3
 * 0 - clock disable from adapter
 * 1 - clock disable from register
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2UNIT_CLOCK_DISABLE_SOURCE_SEL_3 (1 << 27)
/*
 * only EC clock disable (without UDMA)
 * [0] disable EC 0
 * [1] disable EC 1
 * [2] disable EC 2
 * [3] disable EC 3
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2UNIT_CLOCK_DISABLE_EC_MASK 0xF0000000
#define ETH_COMMON_ADP2UNIT_CLOCK_DISABLE_EC_SHIFT 28

/**** shared register ****/
/*
 * shared_cache clock disable
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADP2UNIT_SHARED_CACHE_CLOCK_DISABLE (1 << 0)

/**** pcie_vendor register ****/
/* Reset: 0x0         Access: RW */
#define ETH_COMMON_ADPT_CFG_PCIE_VENDOR_DEV_ID_OVRD_VALUE_MASK 0x0000FFFF
#define ETH_COMMON_ADPT_CFG_PCIE_VENDOR_DEV_ID_OVRD_VALUE_SHIFT 0
/* Reset: 0x0         Access: RW */
#define ETH_COMMON_ADPT_CFG_PCIE_VENDOR_DEV_ID_OVRD (1 << 16)

/**** pcie_base_class register ****/
/* Reset: 0x0         Access: RW */
#define ETH_COMMON_ADPT_CFG_PCIE_BASE_CLASS_ID_OVRD_VALUE_MASK 0x000000FF
#define ETH_COMMON_ADPT_CFG_PCIE_BASE_CLASS_ID_OVRD_VALUE_SHIFT 0
/* Reset: 0x0         Access: RW */
#define ETH_COMMON_ADPT_CFG_PCIE_BASE_CLASS_ID_OVRD (1 << 8)

/**** pcie_sub_class register ****/
/* Reset: 0x0         Access: RW */
#define ETH_COMMON_ADPT_CFG_PCIE_SUB_CLASS_ID_OVRD_VALUE_MASK 0x000000FF
#define ETH_COMMON_ADPT_CFG_PCIE_SUB_CLASS_ID_OVRD_VALUE_SHIFT 0
/* Reset: 0x0         Access: RW */
#define ETH_COMMON_ADPT_CFG_PCIE_SUB_CLASS_ID_OVRD (1 << 8)

/**** pcie_class register ****/
/* Reset: 0x0         Access: RW */
#define ETH_COMMON_ADPT_CFG_PCIE_CLASS_PI_OVRD_VALUE_MASK 0x000000FF
#define ETH_COMMON_ADPT_CFG_PCIE_CLASS_PI_OVRD_VALUE_SHIFT 0
/* Reset: 0x0         Access: RW */
#define ETH_COMMON_ADPT_CFG_PCIE_CLASS_PI_OVRD (1 << 8)

/**** pcie_rev register ****/
/* Reset: 0x0         Access: RW */
#define ETH_COMMON_ADPT_CFG_PCIE_REV_ID_OVRD_VALUE_MASK 0x000000FF
#define ETH_COMMON_ADPT_CFG_PCIE_REV_ID_OVRD_VALUE_SHIFT 0
/* Reset: 0x0         Access: RW */
#define ETH_COMMON_ADPT_CFG_PCIE_REV_ID_OVRD (1 << 8)

/**** nof_vf register ****/
/*
 * zero means only PF exist
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADPT_CFG_NOF_VF_OVRD_VALUE_MASK 0x000000FF
#define ETH_COMMON_ADPT_CFG_NOF_VF_OVRD_VALUE_SHIFT 0
/* Reset: 0x0         Access: RW */
#define ETH_COMMON_ADPT_CFG_NOF_VF_OVRD  (1 << 8)

/**** conf_dev register ****/
/*
 * zero means only PF exist
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADPT_CFG_CONF_DEV_NOT_EXIST_OVRD_VALUE (1 << 0)
/* Reset: 0x0         Access: RW */
#define ETH_COMMON_ADPT_CFG_CONF_DEV_NOT_EXIST_OVRD (1 << 1)

/**** bme register ****/
/* Reset: 0x0         Access: RW */
#define ETH_COMMON_ADPT_CFG_BME_OVRD_SEL_MASK 0x0000000F
#define ETH_COMMON_ADPT_CFG_BME_OVRD_SEL_SHIFT 0
/* Reset: 0x0         Access: RW */
#define ETH_COMMON_ADPT_CFG_BME_OVRD     (1 << 4)

/**** flr_cfg register ****/
/* Reset: 0x0         Access: RW */
#define ETH_COMMON_ADPT_CFG_FLR_CFG_OVRD_SEL_MASK 0x0000000F
#define ETH_COMMON_ADPT_CFG_FLR_CFG_OVRD_SEL_SHIFT 0
/* Reset: 0x0         Access: RW */
#define ETH_COMMON_ADPT_CFG_FLR_CFG_OVRD (1 << 4)

/**** abort_mask_1 register ****/
/*
 * [0] ec_main
 * [1] ec_secondary
 * [2] parser
 * [3] rdma
 * [4] csp 0
 * [5] csp 0 parser
 * [6] csp 1
 * [7] csp 1 parser
 * [8] csp 2
 * [9] csp 2 reserved
 * [10] csp 3
 * [11] csp 3 reserved
 * [12] csp 4
 * [13] csp 4 reserved
 * [14] reserved
 * [15] reserved
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADPT_CFG_ABORT_MASK_1_EC0_MASK 0x0000FFFF
#define ETH_COMMON_ADPT_CFG_ABORT_MASK_1_EC0_SHIFT 0
/*
 * [0] ec_main
 * [1] ec_secondary
 * [2] NA //parser
 * [3] NA //rdma
 * [4] NA //csp 0
 * [5] NA //csp 0 parser
 * [6] NA //csp 1
 * [7] NA //csp 1 parser
 * [8] NA //csp 2
 * [9] NA //csp 2 reserved
 * [10] csp 3
 * [11] csp 3 reserved
 * [12] csp 4
 * [13] csp 4 reserved
 * [14] reserved
 * [15] reserved
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADPT_CFG_ABORT_MASK_1_EC1_MASK 0xFFFF0000
#define ETH_COMMON_ADPT_CFG_ABORT_MASK_1_EC1_SHIFT 16

/**** abort_mask_2 register ****/
/*
 * [0] ec_main
 * [1] ec_secondary
 * [2] NA //parser
 * [3] NA //rdma
 * [4] NA //csp 0
 * [5] NA //csp 0 parser
 * [6] NA //csp 1
 * [7] NA //csp 1 parser
 * [8] NA //csp 2
 * [9] NA //csp 2 reserved
 * [10] csp 3
 * [11] csp 3 reserved
 * [12] csp 4
 * [13] csp 4 reserved
 * [14] reserved
 * [15] reserved
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADPT_CFG_ABORT_MASK_2_EC2_MASK 0x0000FFFF
#define ETH_COMMON_ADPT_CFG_ABORT_MASK_2_EC2_SHIFT 0
/*
 * [0] ec_main
 * [1] ec_secondary
 * [2] NA //parser
 * [3] NA //rdma
 * [4] NA //csp 0
 * [5] NA //csp 0 parser
 * [6] NA //csp 1
 * [7] NA //csp 1 parser
 * [8] NA //csp 2
 * [9] NA //csp 2 reserved
 * [10] csp 3
 * [11] csp 3 reserved
 * [12] csp 4
 * [13] csp 4 reserved
 * [14] reserved
 * [15] reserved
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADPT_CFG_ABORT_MASK_2_EC3_MASK 0xFFFF0000
#define ETH_COMMON_ADPT_CFG_ABORT_MASK_2_EC3_SHIFT 16

/**** abort_mask_3 register ****/
/*
 * [0] parity error
 * [1] functional
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADPT_CFG_ABORT_MASK_3_SHARED_RESOURCE_MASK 0x00000003
#define ETH_COMMON_ADPT_CFG_ABORT_MASK_3_SHARED_RESOURCE_SHIFT 0
/*
 * [0] parity error
 * [1] functional
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADPT_CFG_ABORT_MASK_3_SHARED_CACHE_MASK 0x0000000C
#define ETH_COMMON_ADPT_CFG_ABORT_MASK_3_SHARED_CACHE_SHIFT 2
/*
 * [0] udma 0
 * [1] udma 1
 * [2] udma 2
 * [3] udma 3
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADPT_CFG_ABORT_MASK_3_UDMA_MASK 0x00000F00
#define ETH_COMMON_ADPT_CFG_ABORT_MASK_3_UDMA_SHIFT 8

/**** ec_abort_mask_1 register ****/
/*
 * [0] ec_main
 * [1] ec_secondary
 * [2] parser
 * [3] rdma
 * [4] csp 0
 * [5] csp 0 parser
 * [6] csp 1
 * [7] csp 1 parser
 * [8] csp 2
 * [9] csp 2 reserved
 * [10] csp 3
 * [11] csp 3 reserved
 * [12] csp 4
 * [13] csp 4 reserved
 * [14] reserved
 * [15] reserved
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADPT_CFG_EC_ABORT_MASK_1_EC0_MASK 0x0000FFFF
#define ETH_COMMON_ADPT_CFG_EC_ABORT_MASK_1_EC0_SHIFT 0
/*
 * [0] ec_main
 * [1] ec_secondary
 * [2] NA //parser
 * [3] NA //rdma
 * [4] NA //csp 0
 * [5] NA //csp 0 parser
 * [6] NA //csp 1
 * [7] NA //csp 1 parser
 * [8] NA //csp 2
 * [9] NA //csp 2 reserved
 * [10] csp 3
 * [11] csp 3 reserved
 * [12] csp 4
 * [13] csp 4 reserved
 * [14] reserved
 * [15] reserved
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADPT_CFG_EC_ABORT_MASK_1_EC1_MASK 0xFFFF0000
#define ETH_COMMON_ADPT_CFG_EC_ABORT_MASK_1_EC1_SHIFT 16

/**** ec_abort_mask_2 register ****/
/*
 * [0] ec_main
 * [1] ec_secondary
 * [2] NA //parser
 * [3] NA //rdma
 * [4] NA //csp 0
 * [5] NA //csp 0 parser
 * [6] NA //csp 1
 * [7] NA //csp 1 parser
 * [8] NA //csp 2
 * [9] NA //csp 2 reserved
 * [10] csp 3
 * [11] csp 3 reserved
 * [12] csp 4
 * [13] csp 4 reserved
 * [14] reserved
 * [15] reserved
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADPT_CFG_EC_ABORT_MASK_2_EC2_MASK 0x0000FFFF
#define ETH_COMMON_ADPT_CFG_EC_ABORT_MASK_2_EC2_SHIFT 0
/*
 * [0] ec_main
 * [1] ec_secondary
 * [2] NA //parser
 * [3] NA //rdma
 * [4] NA //csp 0
 * [5] NA //csp 0 parser
 * [6] NA //csp 1
 * [7] NA //csp 1 parser
 * [8] NA //csp 2
 * [9] NA //csp 2 reserved
 * [10] csp 3
 * [11] csp 3 reserved
 * [12] csp 4
 * [13] csp 4 reserved
 * [14] reserved
 * [15] reserved
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADPT_CFG_EC_ABORT_MASK_2_EC3_MASK 0xFFFF0000
#define ETH_COMMON_ADPT_CFG_EC_ABORT_MASK_2_EC3_SHIFT 16

/**** ec_abort_mask_3 register ****/
/*
 * [0] parity error
 * [1] functional
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADPT_CFG_EC_ABORT_MASK_3_SHARED_RESOURCE_MASK 0x00000003
#define ETH_COMMON_ADPT_CFG_EC_ABORT_MASK_3_SHARED_RESOURCE_SHIFT 0
/*
 * [0] parity error
 * [1] functional
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADPT_CFG_EC_ABORT_MASK_3_SHARED_CACHE_MASK 0x0000000C
#define ETH_COMMON_ADPT_CFG_EC_ABORT_MASK_3_SHARED_CACHE_SHIFT 2
/*
 * [0] udma 0
 * [1] udma 1
 * [2] udma 2
 * [3] udma 3
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADPT_CFG_EC_ABORT_MASK_3_UDMA_MASK 0x00000F00
#define ETH_COMMON_ADPT_CFG_EC_ABORT_MASK_3_UDMA_SHIFT 8
/*
 * [0] adapter 0
 * [1] adapter 1
 * [2] adapter 2
 * [3] adapter 3
 * Reset: 0x0         Access: RW
 */
#define ETH_COMMON_ADPT_CFG_EC_ABORT_MASK_3_ADPT_MASK 0x000F0000
#define ETH_COMMON_ADPT_CFG_EC_ABORT_MASK_3_ADPT_SHIFT 16

/**** insue_ec2udma_0_1 register ****/
/*
 * how many lines are in use from EC0 to udma0
 * Reset: 0x0         Access: RO
 */
#define ETH_COMMON_UDMA_RX_FIFOS_INSUE_EC2UDMA_0_1_INUSE0_MASK 0x000007FF
#define ETH_COMMON_UDMA_RX_FIFOS_INSUE_EC2UDMA_0_1_INUSE0_SHIFT 0
/*
 * is udma rx fifo0 empty
 * Reset: 0x0         Access: RO
 */
#define ETH_COMMON_UDMA_RX_FIFOS_INSUE_EC2UDMA_0_1_EMPTY0 (1 << 11)
/*
 * is udma rx fifo0 full
 * Reset: 0x0         Access: RO
 */
#define ETH_COMMON_UDMA_RX_FIFOS_INSUE_EC2UDMA_0_1_FULL0 (1 << 12)
/*
 * how many lines are in use from EC0 to udma1
 * Reset: 0x0         Access: RO
 */
#define ETH_COMMON_UDMA_RX_FIFOS_INSUE_EC2UDMA_0_1_INUSE1_MASK 0x00FFE000
#define ETH_COMMON_UDMA_RX_FIFOS_INSUE_EC2UDMA_0_1_INUSE1_SHIFT 13
/*
 * is udma rx fifo1 empty
 * Reset: 0x0         Access: RO
 */
#define ETH_COMMON_UDMA_RX_FIFOS_INSUE_EC2UDMA_0_1_EMPTY1 (1 << 24)
/*
 * is udma rx fifo1 full
 * Reset: 0x0         Access: RO
 */
#define ETH_COMMON_UDMA_RX_FIFOS_INSUE_EC2UDMA_0_1_FULL1 (1 << 25)

/**** insue_ec2udma_2_3 register ****/
/*
 * how many lines are in use from EC0 to udma2
 * Reset: 0x0         Access: RO
 */
#define ETH_COMMON_UDMA_RX_FIFOS_INSUE_EC2UDMA_2_3_INUSE2_MASK 0x000007FF
#define ETH_COMMON_UDMA_RX_FIFOS_INSUE_EC2UDMA_2_3_INUSE2_SHIFT 0
/*
 * is udma rx fifo2 empty
 * Reset: 0x0         Access: RO
 */
#define ETH_COMMON_UDMA_RX_FIFOS_INSUE_EC2UDMA_2_3_EMPTY2 (1 << 11)
/*
 * is udma rx fifo2 full
 * Reset: 0x0         Access: RO
 */
#define ETH_COMMON_UDMA_RX_FIFOS_INSUE_EC2UDMA_2_3_FULL2 (1 << 12)
/*
 * how many lines are in use from EC0 to udma3
 * Reset: 0x0         Access: RO
 */
#define ETH_COMMON_UDMA_RX_FIFOS_INSUE_EC2UDMA_2_3_INUSE3_MASK 0x00FFE000
#define ETH_COMMON_UDMA_RX_FIFOS_INSUE_EC2UDMA_2_3_INUSE3_SHIFT 13
/*
 * is udma rx fifo3 empty
 * Reset: 0x0         Access: RO
 */
#define ETH_COMMON_UDMA_RX_FIFOS_INSUE_EC2UDMA_2_3_EMPTY3 (1 << 24)
/*
 * is udma rx fifo3 full
 * Reset: 0x0         Access: RO
 */
#define ETH_COMMON_UDMA_RX_FIFOS_INSUE_EC2UDMA_2_3_FULL3 (1 << 25)

/**** qdepth_limit_0_1 register ****/
/*
 * limit fifo0 depth
 * Reset: 0x400       Access: RW
 */
#define ETH_COMMON_UDMA_RX_FIFOS_QDEPTH_LIMIT_0_1_QDEPTH_LIMIT0_MASK 0x000007FF
#define ETH_COMMON_UDMA_RX_FIFOS_QDEPTH_LIMIT_0_1_QDEPTH_LIMIT0_SHIFT 0
/*
 * limit fifo1 depth
 * Reset: 0x400       Access: RW
 */
#define ETH_COMMON_UDMA_RX_FIFOS_QDEPTH_LIMIT_0_1_QDEPTH_LIMIT1_MASK 0x003FF800
#define ETH_COMMON_UDMA_RX_FIFOS_QDEPTH_LIMIT_0_1_QDEPTH_LIMIT1_SHIFT 11

/**** qdepth_limit_2_3 register ****/
/*
 * limit fifo2 depth
 * Reset: 0x400       Access: RW
 */
#define ETH_COMMON_UDMA_RX_FIFOS_QDEPTH_LIMIT_2_3_QDEPTH_LIMIT2_MASK 0x000007FF
#define ETH_COMMON_UDMA_RX_FIFOS_QDEPTH_LIMIT_2_3_QDEPTH_LIMIT2_SHIFT 0
/*
 * limit fifo3 depth
 * Reset: 0x400       Access: RW
 */
#define ETH_COMMON_UDMA_RX_FIFOS_QDEPTH_LIMIT_2_3_QDEPTH_LIMIT3_MASK 0x003FF800
#define ETH_COMMON_UDMA_RX_FIFOS_QDEPTH_LIMIT_2_3_QDEPTH_LIMIT3_SHIFT 11

/**** afull register ****/
/*
 * map the EC output the the correct UDMA fifo
 * Reset: 0x8421      Access: RW
 */
#define ETH_COMMON_UDMA_RX_FIFOS_AFULL_MAPPING_MASK 0x0000FFFF
#define ETH_COMMON_UDMA_RX_FIFOS_AFULL_MAPPING_SHIFT 0

/**** pkt_boundary_cmd register ****/
/* Reset: 0x0         Access: RW */
#define ETH_COMMON_UDMA_RX_FIFOS_PKT_BOUNDARY_CMD_FLUSH_RD_MASK 0x0000000F
#define ETH_COMMON_UDMA_RX_FIFOS_PKT_BOUNDARY_CMD_FLUSH_RD_SHIFT 0
/* Reset: 0x0         Access: RW */
#define ETH_COMMON_UDMA_RX_FIFOS_PKT_BOUNDARY_CMD_STOP_RD_MASK 0x000000F0
#define ETH_COMMON_UDMA_RX_FIFOS_PKT_BOUNDARY_CMD_STOP_RD_SHIFT 4
/* Reset: 0x0         Access: RW */
#define ETH_COMMON_UDMA_RX_FIFOS_PKT_BOUNDARY_CMD_FLUSH_WR_MASK 0x00000F00
#define ETH_COMMON_UDMA_RX_FIFOS_PKT_BOUNDARY_CMD_FLUSH_WR_SHIFT 8
/* Reset: 0x0         Access: RW */
#define ETH_COMMON_UDMA_RX_FIFOS_PKT_BOUNDARY_CMD_STOP_WR_MASK 0x0000F000
#define ETH_COMMON_UDMA_RX_FIFOS_PKT_BOUNDARY_CMD_STOP_WR_SHIFT 12

#ifdef __cplusplus
}
#endif

#endif

/** @} */
