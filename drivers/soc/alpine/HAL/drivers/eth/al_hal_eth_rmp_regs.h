/*
 * Copyright 2018, Amazon.com, Inc. or its affiliates. All Rights Reserved
 */

/**
 *  @{
 * @file   al_hal_eth_rmp_regs.h
 *
 * @brief ec_rmp registers
 *
 * This file was auto-generated by RegGen v1.2.1
 *
 */

#ifndef __AL_HAL_ETH_RMP_REGS_H__
#define __AL_HAL_ETH_RMP_REGS_H__

#include "al_hal_plat_types.h"

#ifdef __cplusplus
extern "C" {
#endif

/*
 * Unit Registers
 */

/*
 * General configuration
 */
struct al_ec_rmp_gen {
	/* [0x0] Ethernet controller Version */
	uint32_t version;
	/* [0x4] Enable modules operation. */
	uint32_t en;
	/* [0x8] Enable FIFO operation on the EC side. */
	uint32_t fifo_en;
	/* [0xc] memory init */
	uint32_t mem_init;
	/* [0x10] */
	uint32_t rsrvd_0[12];
};

/*
 * Ethernet Parsing Engine general configuration
 */
struct al_ec_rmp_epe {
	/* [0x0] Ethernet parsing engine configuration 1 */
	uint32_t parse_cfg;
	/*
	 * [0x4] Input result vector, default values for parser input
	 * Default data for parser result input vector
	 * [31:26] - def_sop_action_table_addr
	 * [25:24] - reserved
	 * [23:15] - p_sop_def_hdr_offset
	 * [14:8] - reserved
	 * [7] - p_sop_def_parse_en
	 * [6:5] - reserved
	 * [4:0] - protocol_index
	 * Reset: 0x8000080   Access: RW
	 */
	uint32_t res_def;
	/* [0x8] Result input vector selection */
	uint32_t res_in;
};

/*
 * Ethernet Parsing Engine, Result pointers
 */
struct al_ec_rmp_epe_res {
	/* [0x0] Parser result vector pointer */
	uint32_t p1;
	/* [0x4] Parser result vector pointer */
	uint32_t p2;
	/* [0x8] Parser result vector pointer */
	uint32_t p3;
	/* [0xc] Parser result vector pointer */
	uint32_t p4;
	/* [0x10] Parser result vector pointer */
	uint32_t p21;
	/* [0x14] */
	uint32_t rsrvd_0[3];
};

/*
 * Ethernet parsing engine, header length configuration.
 * 4 tables, 2  for each parser,
 * 0-15 - Registers for tables of parser 1
 * 16-31 - Registers for tables of parser 2
 */
struct al_ec_rmp_epe_h {
	/*
	 * [0x0] Header length, support for header length table for up to 16 options based on packet
	 * data
	 */
	uint32_t hdr_len;
};

/*
 * Statistic counters
 */
struct al_ec_rmp_stat {
	/*
	 * [0x0] Rx Parser, input packet counter
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t rmp_in_rx_pkt;
	/*
	 * [0x4] Rx Parser, output packet counter
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t rmp_out_rx_pkt;
};

/*
 * Hdr input fifo statistic counters
 */
struct al_ec_rmp_stat_hdr_input_fifo {
	/*
	 * [0x0] Hdr input fifo, input packet counter
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t in_pkt;
	/*
	 * [0x4] Hdr input fifo, input short packet counter
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t in_short;
	/*
	 * [0x8] Hdr input fifo,output long  packet counter
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t in_long;
	/*
	 * [0xc] Hdr input fifo, output packet counter
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t out_pkt;
	/*
	 * [0x10] Hdr input fifo, output short packet counter
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t out_short;
	/*
	 * [0x14] Hdr input fifo, output long packet counter
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t out_long;
	/*
	 * [0x18] Hdr input fifo, output drop packet counter
	 * Counter value
	 * Reset: 0x0         Access: RW, RtoClr
	 */
	uint32_t out_drop;
};

/*
 * Rx Multi Parser
 */
struct al_ec_rmp_rmp {
	/* [0x0] Ethernet Parsing Engine action table configuration */
	uint32_t epe_act_table;
	/* [0x4] Next protocol command (table read trigger) */
	uint32_t epe_act_table_data_1;
	/* [0x8] Data command 1 */
	uint32_t epe_act_table_data_2;
	/* [0xc] Data command 2 */
	uint32_t epe_act_table_data_3;
	/* [0x10] Header length command */
	uint32_t epe_act_table_data_4;
	/* [0x14] Parsing information */
	uint32_t epe_act_table_data_5;
	/* [0x18] Write header length and offsets control */
	uint32_t epe_act_table_data_6;
	/* [0x1c] Data command  3 */
	uint32_t epe_act_table_data_7;
	/* [0x20] Data command  4 */
	uint32_t epe_act_table_data_8;
	/* [0x24] Additional control bits information (table write trigger) */
	uint32_t epe_act_table_data_9;
	/* [0x28] Ethernet Parsing Engine Protocol comperator configuration */
	uint32_t epe_p_comp_table;
	/* [0x2c] Data  for comparison (table read trigger) */
	uint32_t epe_p_comp_data;
	/* [0x30] Mask for comparison */
	uint32_t epe_p_comp_mask;
	/* [0x34] Protocol index action table data (table write trigger) */
	uint32_t epe_p_comp_ctrl;
	/* [0x38] header */
	uint32_t hdr;
	/* [0x3c] FIFO data memory */
	uint32_t data_fifo;
};

struct al_ec_rmp_spare {
	/*
	 * [0x0] spare configuration bits
	 * Reset: 0x0         Access: RW
	 */
	uint32_t zero;
	/*
	 * [0x4] spare configuration bits
	 * Reset: 0xffffffff  Access: RW
	 */
	uint32_t one;
};

struct al_ec_rmp_regs {
	/* [0x0] */
	uint32_t rsrvd_0[32];
	/* [0x80] General configuration */
	struct al_ec_rmp_gen gen;
	/* [0xc0] */
	uint32_t rsrvd_1[16];
	/* [0x100] Ethernet Parsing Engine general configuration */
	struct al_ec_rmp_epe epe[2];
	/* [0x118] */
	uint32_t rsrvd_2[6];
	/* [0x130] Ethernet Parsing Engine, Result pointers */
	struct al_ec_rmp_epe_res epe_res;
	/*
	 * [0x150] Ethernet parsing engine, header length configuration.
	 * 4 tables, 2  for each parser,
	 * 0-15 - Registers for tables of parser 1
	 * 16-31 - Registers for tables of parser 2
	 */
	struct al_ec_rmp_epe_h epe_h[32];
	/* [0x1d0] */
	uint32_t rsrvd_3[12];
	/* [0x200] Statistic counters */
	struct al_ec_rmp_stat stat[8];
	/* [0x240] Hdr input fifo statistic counters */
	struct al_ec_rmp_stat_hdr_input_fifo stat_hdr_input_fifo[4];
	/* [0x2b0] */
	uint32_t rsrvd_4[20];
	/* [0x300] Rx Multi Parser */
	struct al_ec_rmp_rmp rmp;
	/* [0x340] */
	uint32_t rsrvd_5[48];
	/* [0x400] */
	uint32_t int_ctrl_mem[64];
	/* [0x500] */
	struct al_ec_rmp_spare spare[4];
	/* [0x520] */
	uint32_t rsrvd_6[16056];
};


/*
 * Registers Fields
 */

/**** version register ****/
/*
 * Revision number (Minor)
 * Reset: 0x1         Access: RO
 */
#define EC_RMP_GEN_VERSION_RELEASE_NUM_MINOR_MASK 0x000000FF
#define EC_RMP_GEN_VERSION_RELEASE_NUM_MINOR_SHIFT 0
/*
 * Revision number (Major)
 * Reset: 0x1         Access: RO
 */
#define EC_RMP_GEN_VERSION_RELEASE_NUM_MAJOR_MASK 0x0000FF00
#define EC_RMP_GEN_VERSION_RELEASE_NUM_MAJOR_SHIFT 8
/*
 * Day of release
 * Reset: 0x0         Access: RO
 */
#define EC_RMP_GEN_VERSION_DATE_DAY_MASK 0x001F0000
#define EC_RMP_GEN_VERSION_DATE_DAY_SHIFT 16
/*
 * Month of release
 * Reset: 0x0         Access: RO
 */
#define EC_RMP_GEN_VERSION_DATA_MONTH_MASK 0x01E00000
#define EC_RMP_GEN_VERSION_DATA_MONTH_SHIFT 21
/*
 * Year of release (starting from 2000)
 * Reset: 0x0         Access: RO
 */
#define EC_RMP_GEN_VERSION_DATE_YEAR_MASK 0x3E000000
#define EC_RMP_GEN_VERSION_DATE_YEAR_SHIFT 25
/*
 * Reserved
 * Reset: 0x0         Access: RO
 */
#define EC_RMP_GEN_VERSION_RESERVED_MASK 0xC0000000
#define EC_RMP_GEN_VERSION_RESERVED_SHIFT 30

/**** en register ****/
/*
 * Enable Rx first parsing engine output operation.
 * Reset: 0x1         Access: RW
 */
#define EC_RMP_GEN_EN_RPE_1_OUT          (1 << 0)
/*
 * Enable Rx first parsing engine input operation.
 * Reset: 0x1         Access: RW
 */
#define EC_RMP_GEN_EN_RPE_1_IN           (1 << 1)
/*
 * Enable Rx second parsing engine output operation.
 * Reset: 0x1         Access: RW
 */
#define EC_RMP_GEN_EN_RPE_2_OUT          (1 << 2)
/*
 * Enable Rx second parsing engine input operation.
 * Reset: 0x1         Access: RW
 */
#define EC_RMP_GEN_EN_RPE_2_IN           (1 << 3)

/**** fifo_en register ****/
/*
 * Enable Rx first parser FIFO operation.
 * Reset: 0x1         Access: RW
 */
#define EC_RMP_GEN_FIFO_EN_RPE_1_FIFO    (1 << 0)
/*
 * Enable Rx second parser FIFO operation.
 * Reset: 0x1         Access: RW
 */
#define EC_RMP_GEN_FIFO_EN_RPE_2_FIFO    (1 << 1)

/**** mem_init register ****/
/* Reset: 0x1         Access: RW */
#define EC_RMP_GEN_MEM_INIT_TRIG_RMP_HDR_INPUT_FIFO (1 << 0)
/* Reset: 0x1         Access: RW */
#define EC_RMP_GEN_MEM_INIT_TRIG_RMP_DATA_FIFO (1 << 1)

/**** parse_cfg register ****/
/*
 * MAX number of beats for packet parsing
 * Reset: 0xd         Access: RW
 */
#define EC_RMP_EPE_PARSE_CFG_MAX_BEATS_MASK 0x000000FF
#define EC_RMP_EPE_PARSE_CFG_MAX_BEATS_SHIFT 0
/*
 * MAX number of parsing iterations for packet parsing
 * Reset: 0x10        Access: RW
 */
#define EC_RMP_EPE_PARSE_CFG_MAX_ITER_MASK 0x0000FF00
#define EC_RMP_EPE_PARSE_CFG_MAX_ITER_SHIFT 8

/**** res_in register ****/
/*
 * Selector for input parse_en
 * 0 - Input vector
 * 1 - Default value form res_def register
 * Reset: 0x1         Access: RW
 */
#define EC_RMP_EPE_RES_IN_SEL_PARSE_EN   (1 << 0)
/*
 * Selector for input protocol_index
 * 0 - Input vector
 * 1 - Default value form res_def register
 * Reset: 0x1         Access: RW
 */
#define EC_RMP_EPE_RES_IN_SEL_PROT_INDEX (1 << 1)
/*
 * Selector for input hdr_offset
 * 0 - Input vector
 * 1 - Default value form res_def register
 * Reset: 0x1         Access: RW
 */
#define EC_RMP_EPE_RES_IN_SEL_HDR_OFFSET (1 << 2)

/**** p1 register ****/
/*
 * Location of the input protocol index in the parser result vector
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_EPE_RES_P1_IN_PROT_INDEX_MASK 0x000003FF
#define EC_RMP_EPE_RES_P1_IN_PROT_INDEX_SHIFT 0

/**** p2 register ****/
/*
 * Location of the input offset in the parser result vector
 * Reset: 0x1         Access: RW
 */
#define EC_RMP_EPE_RES_P2_IN_OFFSET_MASK 0x000003FF
#define EC_RMP_EPE_RES_P2_IN_OFFSET_SHIFT 0

/**** p3 register ****/
/*
 * Location of the input parse enable in the parser result vector
 * Reset: 0x3         Access: RW
 */
#define EC_RMP_EPE_RES_P3_IN_PARSE_EN_MASK 0x000003FF
#define EC_RMP_EPE_RES_P3_IN_PARSE_EN_SHIFT 0

/**** p4 register ****/
/*
 * Location of the control bits in the parser result vector
 * Reset: 0x4         Access: RW
 */
#define EC_RMP_EPE_RES_P4_CTRL_BITS_MASK 0x000003FF
#define EC_RMP_EPE_RES_P4_CTRL_BITS_SHIFT 0

/**** p21 register ****/
/*
 * Location of the control bits2 in the parser result vector
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_EPE_RES_P21_CTRL_BITS2_MASK 0x000003FF
#define EC_RMP_EPE_RES_P21_CTRL_BITS2_SHIFT 0

/**** hdr_len register ****/
/*
 * Value for selecting table 1
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_EPE_H_HDR_LEN_TABLE_1_MASK 0x000000FF
#define EC_RMP_EPE_H_HDR_LEN_TABLE_1_SHIFT 0
/*
 * Value for selecting table 2
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_EPE_H_HDR_LEN_TABLE_2_MASK 0x00FF0000
#define EC_RMP_EPE_H_HDR_LEN_TABLE_2_SHIFT 16

/**** epe_act_table register ****/
/*
 * Address for accessing the table
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_ADDR_MASK 0x0000003F
#define EC_RMP_RMP_EPE_ACT_TABLE_ADDR_SHIFT 0
/*
 * Parser number
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_PARSER_NUM (1 << 6)

/**** epe_act_table_data_1 register ****/
/*
 * Offset to next protocol [bytes]
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_1_OFFSET_TO_NEXT_PROT_MASK 0x0000003F
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_1_OFFSET_TO_NEXT_PROT_SHIFT 0
/*
 * Next protocol is available in packet data
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_1_NEXT_PROT_AVAIL (1 << 6)
/*
 * Default next protocol index
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_1_DEFAULT_NEXT_PROT_MASK 0x00000F80
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_1_DEFAULT_NEXT_PROT_SHIFT 7
/*
 * Write the detected protocol index into the parser result vector
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_1_PROT_WR (1 << 12)
/*
 * Pointer where to write the detected protocol index in the parser result vector
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_1_PROT_WR_POINTER_MASK 0x007FE000
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_1_PROT_WR_POINTER_SHIFT 13
/*
 * Select which prot_index to write (0 - next, 1 - current)
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_1_PROT_INDEX_SELECT (1 << 23)
/*
 * Select which header length to write (0 - next, 1 - current)
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_1_HEADER_LENGTH_SELECT (1 << 24)
/*
 * Select which header offset to write (0 - next, 1 - current)
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_1_HEADER_OFFSET_SELECT (1 << 25)
/*
 * Default next act_table addr
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_1_DEFAULT_NEXT_ACT_TABLE_ADDR_MASK 0xFC000000
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_1_DEFAULT_NEXT_ACT_TABLE_ADDR_SHIFT 26

/**** epe_act_table_data_2 register ****/
/*
 * Offset to data in the packet [bits]
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_2_OFFSET_TO_DATA_MASK 0x000001FF
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_2_OFFSET_TO_DATA_SHIFT 0
/*
 * Data size [bits]
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_2_DATA_SIZE_MASK 0x0003FE00
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_2_DATA_SIZE_SHIFT 9
/*
 * Write the data to the parser result vector
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_2_DATA_WR (1 << 18)
/*
 * Pointer where to write the data in the parser result vector [bits]
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_2_DATA_WR_POINTER_MASK 0x1FF80000
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_2_DATA_WR_POINTER_SHIFT 19

/**** epe_act_table_data_3 register ****/
/*
 * Offset to data in the packet [bits]
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_3_OFFSET_TO_DATA_MASK 0x000001FF
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_3_OFFSET_TO_DATA_SHIFT 0
/*
 * Data size [bits]
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_3_DATA_SIZE_MASK 0x0003FE00
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_3_DATA_SIZE_SHIFT 9
/*
 * Write the data to the parser result vector
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_3_DATA_WR (1 << 18)
/*
 * Pointer where to write the data in the parser result vector [bits]
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_3_DATA_WR_POINTER_MASK 0x1FF80000
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_3_DATA_WR_POINTER_SHIFT 19

/**** epe_act_table_data_4 register ****/
/*
 * Offset to header length location in the packet [bits]
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_4_OFFSET_TO_HDR_LEN_MASK 0x000000FF
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_4_OFFSET_TO_HDR_LEN_SHIFT 0
/*
 * Header length size [bits]
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_4_HDR_LEN_SIZE_MASK 0x00001F00
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_4_HDR_LEN_SIZE_SHIFT 8
/*
 * Header length units (bit shift)
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_4_HDR_LEN_UNITS_MASK 0x0000E000
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_4_HDR_LEN_UNITS_SHIFT 13
/*
 * Header length command
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_4_HDR_LEN_CMD_MASK 0x000F0000
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_4_HDR_LEN_CMD_SHIFT 16
/*
 * Default header length
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_4_DEF_HDR_LEN_MASK 0x0FF00000
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_4_DEF_HDR_LEN_SHIFT 20

/**** epe_act_table_data_5 register ****/
/*
 * End of parsing
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_5_END_OF_PARSING (1 << 0)
/*
 * Next stage
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_5_NEXT_STAGE_MASK 0x0000000E
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_5_NEXT_STAGE_SHIFT 1
/*
 * Next branch ID set
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_5_SET_MASK 0x000003F0
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_5_SET_SHIFT 4
/*
 * Next branch ID value
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_5_VAL_MASK 0x0000FC00
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_5_VAL_SHIFT 10
/*
 * Control bit set
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_5_CONTROL_BIT_SET_MASK 0x00FF0000
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_5_CONTROL_BIT_SET_SHIFT 16
/*
 * Control bit value
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_5_CONTROL_BIT_VALUE_MASK 0xFF000000
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_5_CONTROL_BIT_VALUE_SHIFT 24

/**** epe_act_table_data_6 register ****/
/*
 * WR header length
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_6_WR_HDR_LEN (1 << 0)
/*
 * Write header length pointer (write 9 bits)
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_6_HDR_LEN_POINTER_MASK 0x000007FE
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_6_HDR_LEN_POINTER_SHIFT 1
/*
 * Write current packet offset
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_6_WR_OFFSET (1 << 11)
/*
 * Write packet offset pointer (write 9 bits)
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_6_OFFSET_POINTER_MASK 0x003FF000
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_6_OFFSET_POINTER_SHIFT 12
/*
 * Input parse enable field for next parser
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_6_EN_NEXT_PARSE (1 << 22)

/**** epe_act_table_data_7 register ****/
/*
 * Offset to data in the packet [bits]
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_7_OFFSET_TO_DATA_MASK 0x000001FF
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_7_OFFSET_TO_DATA_SHIFT 0
/*
 * Data size [bits]
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_7_DATA_SIZE_MASK 0x0003FE00
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_7_DATA_SIZE_SHIFT 9
/*
 * Write the data to the parser result vector
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_7_DATA_WR (1 << 18)
/*
 * Pointer where to write the data in the parser result vector [bits]
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_7_DATA_WR_POINTER_MASK 0x1FF80000
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_7_DATA_WR_POINTER_SHIFT 19

/**** epe_act_table_data_8 register ****/
/*
 * Offset to data in the packet [bits]
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_8_OFFSET_TO_DATA_MASK 0x000001FF
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_8_OFFSET_TO_DATA_SHIFT 0
/*
 * Data size [bits]
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_8_DATA_SIZE_MASK 0x0003FE00
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_8_DATA_SIZE_SHIFT 9
/*
 * Write the data to the parser result vector
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_8_DATA_WR (1 << 18)
/*
 * Pointer where to write the data in the parser result vector [bits]
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_8_DATA_WR_POINTER_MASK 0x1FF80000
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_8_DATA_WR_POINTER_SHIFT 19

/**** epe_act_table_data_9 register ****/
/*
 * Control bit 2 set
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_9_CONTROL_BIT2_SET_MASK 0x0000FFFF
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_9_CONTROL_BIT2_SET_SHIFT 0
/*
 * Control bit 2 value
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_9_CONTROL_BIT2_VALUE_MASK 0xFFFF0000
#define EC_RMP_RMP_EPE_ACT_TABLE_DATA_9_CONTROL_BIT2_VALUE_SHIFT 16

/**** epe_p_comp_table register ****/
/*
 * Address for accessing the table
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_P_COMP_TABLE_ADDR_MASK 0x0000003F
#define EC_RMP_RMP_EPE_P_COMP_TABLE_ADDR_SHIFT 0
/*
 * Parser number
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_P_COMP_TABLE_PARSER_NUM (1 << 6)

/**** epe_p_comp_data register ****/
/*
 * Data 1 for comparison
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_P_COMP_DATA_DATA_1_MASK 0x0000FFFF
#define EC_RMP_RMP_EPE_P_COMP_DATA_DATA_1_SHIFT 0
/*
 * Data 2 for comparison
 * [18:16] - Stage
 * [24:19] - Branch ID
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_P_COMP_DATA_DATA_2_MASK 0x01FF0000
#define EC_RMP_RMP_EPE_P_COMP_DATA_DATA_2_SHIFT 16

/**** epe_p_comp_mask register ****/
/*
 * Mask 1 for comparison
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_P_COMP_MASK_DATA_1_MASK 0x0000FFFF
#define EC_RMP_RMP_EPE_P_COMP_MASK_DATA_1_SHIFT 0
/*
 * Mask 2 for comparison
 * [18:16] - Stage
 * [24:19] - Branch ID
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_P_COMP_MASK_DATA_2_MASK 0x01FF0000
#define EC_RMP_RMP_EPE_P_COMP_MASK_DATA_2_SHIFT 16

/**** epe_p_comp_ctrl register ****/
/*
 * Protocol index value
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_P_COMP_CTRL_PROT_INDEX_RES_MASK 0x0000001F
#define EC_RMP_RMP_EPE_P_COMP_CTRL_PROT_INDEX_RES_SHIFT 0
/*
 * Next action table addr value
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_P_COMP_CTRL_ACT_TABLE_ADDR_RES_MASK 0x000007E0
#define EC_RMP_RMP_EPE_P_COMP_CTRL_ACT_TABLE_ADDR_RES_SHIFT 5
/*
 * Compare command for the data_1 field
 * 00 - Compare
 * 01 - <=
 * 10 - >=
 * 11 - N/A
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_P_COMP_CTRL_CMD_1_MASK 0x00030000
#define EC_RMP_RMP_EPE_P_COMP_CTRL_CMD_1_SHIFT 16
/*
 * Compare command for the data_2 field
 * 00 - Compare
 * 01 - <=
 * 10 - >=
 * 11 - N/A
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_P_COMP_CTRL_CMD_2_MASK 0x000C0000
#define EC_RMP_RMP_EPE_P_COMP_CTRL_CMD_2_SHIFT 18
/*
 * Entry is valid
 * Reset: 0x0         Access: RW
 */
#define EC_RMP_RMP_EPE_P_COMP_CTRL_VALID (1 << 31)

/**** hdr register ****/
/*
 * max header size in 256bit beats
 * Reset: 0x10        Access: RW
 */
#define EC_RMP_RMP_HDR_MAX_HEADERS_SIZE_IN_256B_BEATS_MASK 0x000003FF
#define EC_RMP_RMP_HDR_MAX_HEADERS_SIZE_IN_256B_BEATS_SHIFT 0

/**** data_fifo register ****/
/*
 * fifo depth size
 * Reset: 0x40        Access: RW
 */
#define EC_RMP_RMP_DATA_FIFO_DEPTH_LIMIT_MASK 0x000001FF
#define EC_RMP_RMP_DATA_FIFO_DEPTH_LIMIT_SHIFT 0

#ifdef __cplusplus
}
#endif

#endif

/** @} */
